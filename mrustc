#!/bin/sh
# Copyright (c) 2006 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# export INSTALLS=/tmp/localrust SANSSU=1 && rm -Rf /tmp/pijul-0.10.0/ /tmp/rust+viamrustc-1.19.0 /tmp/rust+viamrustc-1.20.0 && ./pijul +viamrustc 2>&1 | tee /tmp/3.log

set -e

DelieS() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) s="`pwd`/$s" ;; esac ; DelieS ; s="`dirname "$s"`" ; DelieS ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Historique des versions gérées

v 2017.08.31 && versionComplete="$version.b6726e67982b9a73b9f5286c17ff81688ce06b11.git" && prerequis="make cmake compiloSysVersion(gcc >= 6) gcc >= 6 binutils >= 2.21 git bash \\ openssl libssh curl" && modifs="viaGcc libcxxspecifique sousBsd" || true
v 2017.09.25 && versionComplete="$version.9f272dd25bf8ad69a1bd4611f7342e0d22ac6d9b.git" || true
v 2017.10.01 && versionComplete="$version.5b5deea5fcc3e76690d20d8cba726f4edf462619.git" || true
v 2017.11.04 && versionComplete="$version.715ab49457f5d797fae8b155f51142674fe0075c.git" || true
v 2017.11.21 && versionComplete="$version.c131c30e6db48c1edc77b123ce6771e3c5608242.git" || true
# Compile mais génère un _build qui part en boucle infinie (apparemment un mutex_wait qui wait quelque chose qui n'existe plus).
v 2018.01.25 && versionComplete="$version.0de427d0acb099f83bcef81e819c629b703a6e24.git" && modifs="target viaGcc libcxxspecifique sousBsd pointpointbin patache"|| true
# Compile mais le premier build.rs compilé se vautre (SIGABRT). main appelle _ZN3std2rt10lang_start qui appelle _ZN3std3sys3imp4args3imp4init qui appelle une inline quelquechose_issome, qui s'attend à ce que son premier paramètre ait un membre TAG valant 0 ou 1, sinon default: abort(). Or son premier paramètre (_ZN3std3sys3imp4args3imp15GLOBAL_ARGS_PTR, grosso modo argv) n'a pas ce qu'il faut: défaut d'initialisation de _ZN3std3sys3imp4args3imp15GLOBAL_ARGS_PTR? Ça pourrait être lié à l'ordre de chargement des biblios.
v 2018.03.17 && versionComplete="$version.8a64df35a605394fdc969b7abb2702a810d740e5.git" || true
v 2018.04.07 && versionComplete="$version.4f98e4322ef7aabd3bbef8cd93c0980cd6eeeed1.git" || true
v 2018.05.28 && versionComplete="$version.5206b786247238f32a2b5ad8ed7f6d378a1d2d12.git" || true
v 2018.06.04 && versionComplete="$version.42bdc18d4ba8f9fd19109050eb83bb6615539a75.git" || true
v 2018.08.20 && versionComplete="$version.74c2ec9d3c7eb09540a2a5de3127390fa8252179.git" || true
v 2018.10.06 && versionComplete="$version.1382500b5fdba00568a86f0122bc2e78584dfb5d.git" || true
v 2019.01.15 && versionComplete="$version.1a3c5dfcab0776c9a9a057303f823cec16386517.git" || true
v 2019.05.29 && versionComplete="$version.ebd8edeb4f1861943cc82d310564b1f592e63272.git" || true
v 2020.01.07 && versionComplete="$version.7ae47eff58abb672dd8462fda84bf652b348225b.git" || true
#v 2019.11.29 && versionComplete="$version.2549db1d01ac3e7dd1444860ec693d6b55b0efef.git" && prerequis="make cmake compiloSysVersion(clang >= 8, gcc >= 6) git bash \\ openssl libssh curl" && modifs="target2 sousBsd pointpointbin patache" || true
v 2019.11.29 && versionComplete="$version.2549db1d01ac3e7dd1444860ec693d6b55b0efef.git" && prerequis="make cmake compiloSysVersion(gcc >= 6) gcc >= 6 binutils >= 2.21 git bash \\ openssl libssh curl" && modifs="target2 viaGcc libcxxspecifique sousBsd pointpointbin patache" || true
v 2020.01.05 && versionComplete="$version.aa9d5a9fa0ee79650b15db06e69bbbf591710f68.git" || true
prerequis="make cmake compiloSysVersion(gcc >= 6) gcc >= 6 git bash \\ openssl libssh curl"
modifs="$modifs dylib"
v 2020.08.10 && versionComplete="$version.32f67fd7f219cabc1d1b219e7d72dcab32130503.git" || true
v 2021.01.25 && versionComplete="$version.40800d3dc098ae4b604a5192f309ff0f5ecc600e.git" || true
v 2021.03.06 && versionComplete="$version.0eaf40b1d305d69372a5047f6a9323c00978aa11.git" || true
v 2021.04.28 && versionComplete="$version.8f7baf68165571d381ddb47bef19eb4cd672924c.git" || true
v 2021.10.01 && versionComplete="$version.5c07a88cb51c8fb6d66272db6559c1cb99c4affe.git" || true
v 2021.11.23 && versionComplete="$version.2ba326cde8122f545a45e5ee4181ecce4837fa5e.git" || true
v 2023.10.15 && versionComplete="$version.38c9db25324351badeaaef91a7755cd5b50e1336.git" || true

# Modifications

dylib()
{
	# rustc: les premières biblios indépendantes compilent, mais le premier de "(0/85) BUILDING rustc_platform_intrinsics v0.0.0" échoue en "terminate called after throwing an instance of 'Lexer::EndOfFile'".
	# En effet dans le dossier output, les .rlilb.o sont bien pleins, mais les .rlib (en résultant?) sont tous vides.
	# Et voilà que dans le codegen_c.cpp, on voit un beau: "HACK! Static libraries aren't implemented properly yet, just touch the output file"
	# En relançant la commande tracée avec du dylib (format) ou so (suffixe) au lieu de rlib, hop, on a un .so tout beau!
	filtrer tools/minicargo/build.cpp sed -e 's/: PackageTarget::CrateType::rlib/: PackageTarget::CrateType::dylib/' -e 's/getenv.*MINICARGO_DYLIB/1 || &/'
	filtrer minicargo.mk sed -e 's/rlib/so/g'
	case `uname` in
		FreeBSD)
			filtrer run_rustc/Makefile sed -e 's/ -l dl//'
			for f in script-overrides/*/build_std.txt
			do
				filtrer "$f" grep -v "cargo:rustc-link-lib=dl"
			done
			;;
	esac
}

patache()
{
	grep -rl '<path' tools/minicargo | while read f
	do
		filtrer "$f" sed -e 's#<path\.h>#"path.h"#'
	done
}

pointpointbin()
{
	# Je ne sais pourquoi le Makefile va chercher son mrustc généré un coup trop haut.
	ici="`pwd`"
	rm -f ../bin
	ln -s "`basename "$ici"`/bin" ../bin
}

target2()
{
	systeme=`uname -s | tr A-Z a-z`
	proc=`uname -m`
	case "$systeme" in
		linux) return ;;
	esac
	case $proc in
		amd64) proc=x86_64 ;;
	esac
	
	OPTIONS_MAKE="$OPTIONS_MAKE RUSTC_TARGET=$proc-unknown-$systeme"
}

target()
{
	systeme=`uname -s | tr A-Z a-z`
	proc=`uname -m`
	case $systeme in
		darwin) marchand=apple ;; # À FAIRE: regarder si ce n'est pas là qu'il faudrait indiquer macos ou ios (pour les inclusions conditionnelles de libc/mod.rs, par exemple).
		linux) marchand=linux ; systeme=gnu ;;
		*) marchand=$systeme ;;
	esac
	case $proc in
		amd64) proc=x86_64 ;;
	esac
	cible="$proc-$marchand-$systeme`uname -r | cut -d - -f 1`"
	filtrer src/main.cpp sed -e 's/error "Unable to detect a suitable default target"/define DEFAULT_TARGET_NAME "'"$cible"'"/'
	
	local codeGen='CodegenMode::Gnu11, "'"$cible"'"'
	pge $version 2018.06.04 && codeGen="{$codeGen, BACKEND_C_OPTS_GNU}" || true # Les versions suivantes ajoutent un ensemble de flags spécifiques à GNU,à terme pour pouvoir passer aussi des flags clang (dans un premier temps pour Mac OS): bientôt une compil native clang?
	code='else if(target_name == "'"$cible"'") return TargetSpec { "unix", "'"$marchand"'", "gnu", '"$codeGen"', ARCH_'"`echo "$proc" | tr a-z A-Z`"' };';
	code="`echo "$code" | sed -e 's/"/\\\\"/g'`"
	filtrer src/trans/target.cpp awk '/else if[ (]*target_name/{if(!fait){print "'"$code"'";fait=1}}{print}'
}

sousBsd()
{
	sousBsdCompilMrustc
	sousBsdLienLlvm
	sousBsdSansLdl
}

ldl()
{
	cat > "$TMP/testdl.c" <<TERMINE
#include <dlfcn.h>
void * dlopen(const char * path, int mode);
int main(int argc, char ** argv) { dlopen("/tmp/bloug", 0000); }
TERMINE
	for ldl_options in "" "-ldl"
	do
		if cc -o "$TMP/testdl" "$TMP/testdl.c" $ldl_options 2> /dev/null
		then
			echo "$ldl_options"
			return 0
		fi
	done
	echo "# Impossible de trouver les options de compilation pour embarquer dlopen()." >&2
	return 1
}

# Sous BSD, pas besoin de -ldl pour avoir dlopen. Voire, si une dlcompat n'a pas été installée, ça pète.
sousBsdSansLdl()
{
	if [ -z "`ldl`" ]
	then
		filtrer run_rustc/Makefile sed -e 's#-l *dl##g'
		filtrer script-overrides/stable-1.19.0-linux/build_std.txt sed -e '/^cargo:rustc-link-lib=dl/s/^/#/'
	fi
}

sousBsdLienLlvm()
{
	# FreeBSD définit la variable globale environ dans crt1.o (le machin embarqué uniquement dans les applis finales), plutôt que dans une biblio. Du coup si ld est un tantinet chiant avec les symboles indéfinis dans les .so, on se fait jeter car on n'a pas moyen de lui indiquer "mais si mais si, à l'exécution, ton environ sera forcément défini car le binaire aura forcément inclut crt1.so).
	# Problème: ce truc est inscrit ensuite en dur dans mrustc, qui le propose à la compil de rust; or ce dernier passe LDFLAGS directement au compilo, sans -W,l
	true || \
	export LDFLAGS="$LDFLAGS --warn-unresolved-symbols"
}

sousBsdCompilMrustc()
{
	filtrer src/span.cpp awk '/#include/{if(!fait)print"#include <stdlib.h>";fait=1}{print}'
	filtrer src/expand/proc_macro.cpp sed -e '/unistd/a\
extern char **environ;
'
}

viaGcc()
{
	# mrustc utilise trop de trucs spécifiques GCC / libstdc++; bien qu'un effort ait été fait (libcxxspecifique), on n'arrive toujours pas à compiler via clang / libc++ au 2017-11-23. Donc GCC obligatoire.
	export CC=gcc CXX=g++
}

libcxxspecifique()
{
	filtrer src/common.hpp sed -e '/define FMT/{
h
s/[a-z]*_cast<[^>]*>//
i\
#ifdef _LIBCPP_VERSION
p
i\
#else
a\
#endif
x
}'
	patch -p0 <<TERMINE
--- src/main.cpp	2017-10-03 22:07:31.289880000 +0200
+++ src/main.cpp	2017-10-03 22:07:17.064410000 +0200
@@ -723,7 +723,7 @@
                     exit(1);
                 }
 
-                auto name = ::std::string(desc, pos);
+                auto name = ::std::string(desc, (const char *)pos);
                 auto path = ::std::string(pos+1);
                 this->crate_overrides.insert(::std::make_pair( mv\$(name), mv\$(path) ));
             }
TERMINE
	# Un bout de code qui interdit le destructeur de TypeRef, malheureusement nécessaire pour des first() et second() qui utilisent de la construction et destruction par copie dans libc++.
	filtrer src/ast/types.hpp sed -e 's/#if 1/#if 0/'
}

# Variables

archive_git="https://github.com/thepowersgang/mrustc.git"

destiner

prerequis

if false ; then
echo ALLEZ-Y
cd /tmp/mrustc.git-$version*
export CC=gcc CXX=g++
bash
else

obtenirEtAllerDansVersion

echo Correction… >&2
OPTIONS_MAKE=
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2

echo Compilation… >&2
minicargo=bin/minicargo
if pge $version 2020.08.10
then
if true
then
	make $OPTIONS_MAKE
	make $OPTIONS_MAKE -C tools/minicargo/
else
	make $OPTIONS_MAKE RUSTCSRC

appelsSysBsdPurs()
{
	# Va-t'en comprendre pourquoi, les src/vendor/libc/src/unix/**/mod.rs et src/liblibc/src/unix/**/mod.rs codent en dur que l'appel système fstat (et d'autres) valent asm("fstat@FBSD_1.0"). Ce qui est vrai in fine, mais d'une ce n'est pas au .rs fourni avec rustc de coder en dur ce qui pourrait être résolu à l'édition de liens, de deux ça nous fout la grouille en assembleur.
	# En effet, la compilation (via gcc en tout cas) transforme cela en 'call fstat@FBSD_1.0', or pour GNU as, "@" est un caractère réservé, il faudrait donc le mettre sous la forme 'call "fstat@FBSD_1.0"'.
	# De plus cc1 en optimise l'exécution en lui ajoutant un @PLT (xxx@PLT est une procédure mutante, qui au début pointe sur la version lourde (initialisation puis réécriture de xxx@PLT pour pointer directement sur xxx puis appel de cette dernière), les appels subséquents allant directement à xxx).
	# L'expression résultante 'call fstat@FBSD_1.0@PLT' est donc plantogène ("Error: junk `@FBSD_1.0@PLT' after expression"); on le résout en virant le suffixe @FBSD_x.x.
	grep -rl @FBSD_ src/liblibc src/vendor | while read f
	do
		filtrer "$f" sed -e 's/@FBSD_[.0-9]*//g'
	done
}

sousBsdLienLlvm()
{
	# FreeBSD définit la variable globale environ dans crt1.o (le machin embarqué uniquement dans les applis finales), plutôt que dans une biblio. Du coup si ld est un tantinet chiant avec les symboles indéfinis dans les .so, on se fait jeter car on n'a pas moyen de lui indiquer "mais si mais si, à l'exécution, ton environ sera forcément défini car le binaire aura forcément inclus crt1.so).
	export LDFLAGS="$LDFLAGS -Wl,--warn-unresolved-symbols"
	# Malgré ce qui est indiqué dans la doc GNU ld, le -z defs pète en génération de biblio partagée. Il faut donc ajouter notre --warn APRÈS le -z defs.
	filtrer src/llvm/cmake/modules/HandleLLVMOptions.cmake sed -e 's#-Wl,-z,defs#-Wl,-z,defs -Wl,--warn-unresolved-symbols#g'
	# On vire toutes les options passées au compilo chapeau (sans -Wl,):
	args_suppr -e LDFLAGS --warn-unresolved-symbols # Celui du sousBsdLienLlvm de mrustc.
}
	( cd rustc-1.29.0-src && appelsSysBsdPurs && sousBsdLienLlvm )
	make $OPTIONS_MAKE -f minicargo.mk
fi
else
	minicargo=tools/bin/minicargo
make $OPTIONS_MAKE
make $OPTIONS_MAKE -f minicargo.mk tools/bin/minicargo
fi
if option rustc # À ne pas utiliser; mieux vaut compiler mrustc de son côté, puis rust 1.19.0 +viamrustc
then
	# https://github.com/thepowersgang/mrustc: sous FreeBSD il est possible qu'il faille remplacer make par:
	# gmake CC=cc RUSTC_TARGET=x86_64-unknown-freebsd
	# Ceci permettrait de se passer de target(), et d'utiliser clang plutôt que gcc.
	# La version de mai 2019 ne le gérerait pas encore, celle de novembre si.
	# En pratique non, toujours pas (au moins pour la partie clang: erreur dès le début sur un hash_table).
	make $OPTIONS_MAKE RUSTCSRC
	make $OPTIONS_MAKE -f minicargo.mk
	make $OPTIONS_MAKE -C run_rustc
fi
fi

echo Installation… >&2
mkdir dest dest/bin dest/share dest/share/mrustc
cp bin/mrustc "$minicargo" dest/bin/
cp -R lib dest/lib
tar cf - Makefile minicargo.mk rust-version tools/minicargo tools/common script-overrides rust*src.patch lib | ( cd dest/share/mrustc && tar xf - )
sudo cp -R dest "$dest"

sutiliser
