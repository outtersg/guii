#!/bin/sh
# Copyright (c) 2005 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

absolutiseScripts() { SCRIPTS="$1" ; echo "$SCRIPTS" | grep -q ^/ || SCRIPTS="`dirname "$2"`/$SCRIPTS" ; }
calcScripts() { absolutiseScripts "`command -v "$1"`" "`pwd`/." ; while [ -h "$SCRIPTS" ] ; do absolutiseScripts "`readlink "$SCRIPTS"`" "$SCRIPTS" ; done ; SCRIPTS="`dirname "$SCRIPTS"`" ; }
calcScripts "$0"
. "$SCRIPTS/util.sh"

v 0.10.33 && prerequis="libexecinfo py2()" && modifs="pasGcc" || true
v 0.12.4 && prerequis="libexecinfo py2()" && modifs="pasGcc pthreadtInt doubleResult neReconstruisPasTout" || true
v 5.3.0 && prerequis="libexecinfo py2()" && modifs="pasGcc cstds neReconstruisPasTout sansGold" || true
v 6.9.1 && prerequis="libexecinfo py2()" && modifs="pasGcc" || true
v 6.10.0 && prerequis="libexecinfo py2()" && modifs="pasGcc" || true
v 8.12.0 && prerequis="libexecinfo py2()" && modifs="pasGcc" || true
v 10.15.1 && prerequis="cpp14()" && modifs="$modifs pasGArLd" || true

archive="http://nodejs.org/dist/v$version/node-v$version.tar.gz"

cpp14()
{
	# Il nous faut un C++14 pour Node 10, qui fait usage de make_unique.
	compiloSysVersion "clang >= 3.5" "gcc >= 5" # clang 3.4 supporte, mais en -std=c++1y.
}

pasGArLd()
{
	# GNU ar nous crée des .a bizarres avec un en-tête !<thin> qui plantent le ld FreeBSD 11.
	[ `uname` = FreeBSD ] || return 0
	export LINK="`command -v clang++`" AR=/usr/bin/ar LDFLAGS="-lstdc++ -lm"
}

py2()
{
	# NodeJS repose sur gyp, un outil de génération de Makefiles qui ne sera pas porté sous Python3 (et requiert spécifiquement des paquets Python 2, donc 2to3 ne marche pas).
	prerequerir openssl # Ah oui, et puis il utilise hashlib pour des sha1, or l'implémentation par défaut de Python repose sur OpenSSL pour ce besoin.
	prerequerir python "< 3"
	# À FAIRE: pouvoir reposer sur un python2 livré système, plutôt que de le recompiler. Problème: on ne peut simplement partir sur un remplacement de "env python" par "env python2" dans le configure, car d'autres scripts jouent sur ce env python et j'ai la flemme d'aller tous les chercher. Donc la solution est de faire en sorte qu'"env python" nous renvoie toujours un python2, autrement dit d'avoir python2 en tant que python dans le PATH. Et donc le prérequis c'est que python2 et python3 soient livrés séparément, histoire de pouvoir inclure dans le PATH le premier et pas le second. prerequerir nous le garantit, alors qu'un système vierge… Ben on ne sait pas, ça dépend. Donc on privilégie la sécurité au détriment de la légèreté, pour le moment.
}

sansGold()
{
    # https://github.com/nodejs/node/issues/4212
    GYP_DEFINES="linux_use_gold_flags=0 $GYP_DEFINES"
    export GYP_DEFINES
}

cstds()
{
	# FILE est utilisé sans être déclaré.
	filtrer deps/v8/src/base/platform/platform.h sed -e '/include <vector>/a\
#include <cstdio>
'
	filtrer deps/v8/src/log-utils.h sed -e '/#include "src\/allocation/{
i\
#include <cstdio>
i\
#include <cstdarg>
}'
}

pthreadtInt()
{
	filtrer deps/v8/src/base/platform/platform-posix.cc sed -e '/return static_cast<int>.pthread_self...;/s/pthread_self/(int64_t)pthread_self/'
}

doubleResult()
{
	filtrer deps/v8/src/base/platform/platform-freebsd.cc sed -e '/GetSharedLibraryAddresses/,/^}/{
s/> result/> retour/
s/return result/return retour/
s/result.push_back/retour.push_back/
}'
}

neReconstruisPasTout()
{
	filtrer Makefile sed -e '/^install:/s/:.*/:/'
}

pasGcc()
{
	# gyp (et dans les dernières versions le configure principal de Node) attend CC et CXX, et les définit par défaut à gcc si elles sont vides. Alors on les définit.
	command -v gcc > /dev/null 2>&1 || CC=cc
	command -v g++ > /dev/null 2>&1 || CXX=c++
	export CC CXX
}

destiner

prerequis

if true
then
	cd "$TMP/node-v$version"
	echo "EN AVANT, FAITES-VOUS PLAISIR" >&2
	bash
else

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
./configure --prefix="$dest"

echo Compilation… >&2
MAKE="make -j 3" make

fi

echo Installation… >&2
sudo LD_LIBRARY_PATH="$LD_LIBRARY_PATH" make install
sutiliser
