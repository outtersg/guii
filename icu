#!/bin/sh
# Copyright (c) 2005 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

absolutiseScripts() { SCRIPTS="$1" ; echo "$SCRIPTS" | grep -q ^/ || SCRIPTS="`dirname "$2"`/$SCRIPTS" ; } ; absolutiseScripts "`command -v "$0"`" "`pwd`/." ; while [ -h "$SCRIPTS" ] ; do absolutiseScripts "`readlink "$SCRIPTS"`" "$SCRIPTS" ; done ; SCRIPTS="`dirname "$SCRIPTS"`"
. "$SCRIPTS/util.sh"

# Historique des versions gérées

v 3.4
v 3.6
# Crétin, il ne trouve même pas son fichier.
#version=3.8.1
v 4.4
# Me fait Bus errorer un packagedata à la compil; à moins que ça ne soit le gmake que j'ai installé entretemps à la place du BSDmake.
#v 4.4.1
v 50.1.2 && modifs="moinsIPointAvantILocal toutLeMondeVeutTruncate" || true
v 52.1 && modifs="moinsIPointAvantILocal toutLeMondeVeutTruncate" || true
v 55.1 && modifs="moinsIPointAvantILocal toutLeMondeVeutTruncate ldlproot" || true
v 59.1 || true
v 62.1 && modifs="$modifs types16" || true
v 63.1 || true

versiong="`echo "$version" | tr . _`"
archive=ftp://ftp.software.ibm.com/software/globalization/$logiciel/$version/$logiciel-$version.tgz
pge $version 3.8 && archive=http://download.icu-project.org/files/icu4c/$version/${logiciel}4c-$versiong-src.tgz

# Modifications

types16()
{
	# Sur certains vieux compilos à la limite de gérer le char16_t (du genre: sortis à peu près en même temps que C++11), il y a un peu de fouille à faire pour dénicher les bons paramètres d'appel pour le lui faire trouver. Voire brancher directement le type interne dessus.
	local char16
	local cflags
	_varsTypes16()
	{
		for char16 in char16_t __char16_t __CHAR16_TYPE__ uint16_t impossible_de_trouver_un_char16_t_dans_votre_compilo
		do
			for cflags in "" "-std=c++11"
			do
				( echo '#include <uchar.h>' ; echo "$char16 c;" ) > $TMP/1.c
				# En réalité il faudrait sans doute tester la chose avec du c++.
				CFLAGS="$CFLAGS $cflags" c++ -c -o $TMP/1.o $TMP/1.c 2> /dev/null && return || continue
			done
		done
	}
	_varsTypes16
	case "$char16" in
		impossible*) echo "# Votre compilateur n'a rien qui puisse servir de char16_t, malgré tous mes efforts." >&2 ; return 1 ;;
	esac
	filtrer source/common/unicode/umachine.h sed -e "s/typedef char16_t/typedef $char16/g"
	export CFLAGS="$CFLAGS $cflags"
}

moinsIPointAvantILocal()
{
	# Les répertoires système (CPPFLAGS) vont bien évidemment après les locaux (sinon si un ICU est déjà installé, ses include prennent le pas sur ceux à installer!). Mais comme GNU Make permet le suffixage de variables dynamiques mais pas leur préfixage, on ne pourra faire un CPPFLAGS="-I. $CPPFLAGS" dans le Makefile; on le fait donc en amont, en shell.
	false &&
	filtrer source/common/Makefile.in sed -e '/CPPFLAGS += -I/{
s/+//
s#$# $(CPPFLAGS)#
}'
	CPPFLAGS="-I. -I./unicode -I./.. -I../common -I../../common -I../../i18n -I./../toolutil $CPPFLAGS"
	LDFLAGS="-L../../lib -L../../stubdata -L../lib -L../stubdata $LDFLAGS"
	export CPPFLAGS LDFLAGS
}

toutLeMondeVeutTruncate()
{
	# truncate est un appel système (sous FreeBSD), mais aussi tantôt un nom de variable (statique…), tantôt une fonction, dans ICU. Alors mettons qu'on n'a pas besoin de la version système.
	CPPFLAGS="$CPPFLAGS -D_TRUNCATE_DECLARED"
	export CPPFLAGS
}

ldlproot()
{
	# Le sudo make install fait un bout de compil. C'est gentil, mais étant donné que sudo vide l'environnement, il ne verra aucune de nos variables d'env surchargées. On doit donc les coder en dur dans le Makefile.
	for i in icudefs.mk.in icudefs.mk
	do
		[ -e "$i" ] && filtrer "$i" sed -e "s#\\\$\\\$\\\$(LDLIBRARYPATH_ENVVAR)#$LD_LIBRARY_PATH#g" || true
	done
}

# Variables

prerequis

destiner

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
cd source
if pge $version 50
then
	./configure --prefix="$dest"
else
	type=`uname -s`
	[ $type = Darwin ] && type=MacOSX
	./runConfigureICU $type --prefix="$dest"
fi

echo Compilation… >&2
make

echo Installation… >&2
sudo make install
sutiliser
