#!/bin/sh
# Copyright (c) 2006 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delicat() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delicat ; s="`dirname "$s"`" ; Delicat ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Historique des versions gérées

v 1.9.0 && prerequis="python < 3 cmake" && modifs="pasDIncludesDansLesFlags makeSimple macLibre macMath macLibtool drapeaux" || true
v 1.13.0 || true
v 1.14.0 || true
v 1.15.0 || true
v 1.16.0 && prerequis="python < 3 cmake >= 3.4.3" && modifs="targetClang pasDIncludesDansLesFlags makeSimple macLibre macMath macLibtool llvmStrnlen sousBsdLienLlvm drapeaux" && OPTIONS_CONF="$OPTIONS_CONF --disable-rustbuild" || true
v 1.17.0 && prerequis="python < 3 cmake >= 3.4.3 clang 3.9.1" && modifs="$modifs avecQuelquesWarnings" && OPTIONS_CONF="" || true
v 1.18.0 || true
v 1.19.0 || true
v 1.20.0 || true
v 1.29.0 && ajouterModif appelsSysBsdPurs && v_llvm=">= 7 < 8" || true

# NOTE: AVEC_GCC, v_llvm et Delicat
# 
# mrustc, utilisé pour compiler rustc, est compilé par gcc (même sur les systèmes à clang).
# => afin de ne pas avoir de souci d'incompatibilités C++, il est nécessaire de compiler (cette première mouture de) rustc par gcc.
# 
# A priori un petit souci entre le C++ GNU (sous lequel a été compilé mrustc, et qu'il utilise pour compiler), le LLVM système (un 12 pour ma part), et celui avec lequel rustc est habitué à tourner (7.0.0 d'après llvm/CMakeLists.txt de rustc 1.29).
# En regardant le détail:
#   error: appel ambigu à la surcharge « unwrap(LLVMOpaquePassManagerBuilder*&) »
#   error: « initializeCore » n'a pas été déclaré dans cette portée
#   etc.
# Donc bête problème d'alignement de version de LLVM.
# => v_llvm doit être aligné sur la version de LLVM avec laquelle celle de rust s'attend à être compilé (au moins en majeure).

# Bon donc seconde passe avec un LLVM + Clang 7.1: pas trop mal, sauf qu'à un moment il lance un:
#   clang++ -Lgcc-7.3.0/include -Iclang-12.0.0/include -Iclang-7.1.0/include
# Erreur sur <vector>, du fait du clang 12 (système) qui s'est immiscé avant le clang 7
# => on vire le clang-12 en passant en GuiLI "strict" par la fonction Delicat.

AVEC_GCC=oui
choixCompilo()
{
	if [ $AVEC_GCC = non ]
	then
		# Si ça plante sur la compilation de llvm, du genre ld qui n'arrive pas à lier un truc qui parle de mach-o: forcer la compil via clang:
		# STRICT_ANSI: pour Mac, cf. http://comments.gmane.org/gmane.comp.compilers.clang.devel/12721
		export \
			CC="clang" \
			CXX="clang++" \
			CPPFLAGS="-U__STRICT_ANSI__" # Seront reportés sur CXXFLAGS et CFLAGS, cf. drapeaux().
	fi
}
choixCompilo

if option viamrustc
then
	compilo=gcc
	[ $AVEC_GCC = oui ] || compilo="clang $v_llvm"
	prerequis="compiloSysVersion($compilo) make mrustc binutils $prerequis \\"
	virerPrerequis clang
	#prerequis="make mrustc binutils $prerequis \\"
	modifsMC="outpute"
fi

# Le rustbuild télécharge une précédente version de rustc de chez eux, qui code en dur l'ordre des compilos à essayer, et donc ne tient pas compte de notre --enable-clang quand on le lui demande (ce qui nous embête parce qu'on imagine que lors de la compil du compilo niveau 2 il va finir par revenir à ce qu'on lui a spécifié, et donc la compil niveau 2 se fera avec un compilo différent de la compil niveau 1, ce qui fera deux fois plus de particularités à gérer).
# À FAIRE: détecter le "meilleur" compilo à utiliser (le plus récemment compilé?).
[ $AVEC_GCC = oui ] || \
OPTIONS_CONF="$OPTIONS_CONF --enable-clang"
OPTIONS_CONF="$OPTIONS_CONF --enable-local-rust"
destllvm="`for i in clang llvm ; do reglagesCompilPrerequis "$i $v_llvm" 2> /dev/null || true ; done ; ( echo "$destclang" ; echo "$destllvm" ) | grep -v ^$ | head -1`"
if [ ! -z "$destllvm" ]
then
	cyan "LLVM: $destllvm"
	OPTIONS_CONF="$OPTIONS_CONF --llvm-root=$destllvm --enable-llvm-link-shared" # Par configure
	export LLVM_LINK_SHARED=1 # Par mrustc
	modifs="$modifs cheminBibliosLlvm"
	modifsMC="$modifsMC llvmExt"
else
	cyan "Utilisation sans LLVM GuiLI"
	rouge "/!\\ Vous vous exposez à faire recompiler llvm par rust, avec potentiellement des incompatibilités avec votre système." # Alors que si clang a été compilé en GuiLI on a dû araser toute aspérité.
fi

# Modifications

appelsSysBsdPurs()
{
	# Va-t'en comprendre pourquoi, les src/vendor/libc/src/unix/**/mod.rs et src/liblibc/src/unix/**/mod.rs codent en dur que l'appel système fstat (et d'autres) valent asm("fstat@FBSD_1.0"). Ce qui est vrai in fine, mais d'une ce n'est pas au .rs fourni avec rustc de coder en dur ce qui pourrait être résolu à l'édition de liens, de deux ça nous fout la grouille en assembleur.
	# En effet, la compilation (via gcc en tout cas) transforme cela en 'call fstat@FBSD_1.0', or pour GNU as, "@" est un caractère réservé, il faudrait donc le mettre sous la forme 'call "fstat@FBSD_1.0"'.
	# De plus cc1 en optimise l'exécution en lui ajoutant un @PLT (xxx@PLT est une procédure mutante, qui au début pointe sur la version lourde (initialisation puis réécriture de xxx@PLT pour pointer directement sur xxx puis appel de cette dernière), les appels subséquents allant directement à xxx).
	# L'expression résultante 'call fstat@FBSD_1.0@PLT' est donc plantogène ("Error: junk `@FBSD_1.0@PLT' after expression"); on le résout en virant le suffixe @FBSD_x.x.
	grep -rl @FBSD_ src/liblibc src/vendor | while read f
	do
		filtrer "$f" sed -e 's/@FBSD_[.0-9]*//g'
	done
}

sousBsdLienLlvm()
{
	# FreeBSD définit la variable globale environ dans crt1.o (le machin embarqué uniquement dans les applis finales), plutôt que dans une biblio. Du coup si ld est un tantinet chiant avec les symboles indéfinis dans les .so, on se fait jeter car on n'a pas moyen de lui indiquer "mais si mais si, à l'exécution, ton environ sera forcément défini car le binaire aura forcément inclus crt1.so).
	export LDFLAGS="$LDFLAGS -Wl,--warn-unresolved-symbols"
	# Malgré ce qui est indiqué dans la doc GNU ld, le -z defs pète en génération de biblio partagée. Il faut donc ajouter notre --warn APRÈS le -z defs.
	filtrer src/llvm/cmake/modules/HandleLLVMOptions.cmake sed -e 's#-Wl,-z,defs#-Wl,-z,defs -Wl,--warn-unresolved-symbols#g'
}

cheminBibliosLlvm()
{
	local destcompilo
	# Lorsque l'on demande à rust d'utiliser la version dynamique d'LLVM (--enable-llvm-link-shared), en 1.17.0 en tout cas, c'est bien, il ajoute les -l qu'il faut (à la place de la version static où il met le chemin complet vers le .a)… mais il oublie les -L, donc plantage.
	for destcompilo in "$destllvm" #"$destgcc"
	do
		export RUSTFLAGS="$RUSTFLAGS -C link-args=-Wl,-L$destcompilo/lib"
	done
}

llvmExt()
{
	# On a en prérequis un LLVM, autant l'utiliser plutôt que de redemander à rust de s'en recompiler un.
	# Donc:
	# - on fait sauter dans minicargo.mk toute instruction de _recompil_ du llvm-config
	# - et pour ce qui est de son _utilisation_, on le remplace par celui de notre llvm externe après filtrage (cf. plus bas).
	filtrer minicargo.mk sed -e '/^[^:]*:/s/ \$(LLVM_CONFIG)//' -e "/^LLVM_CONFIG/c\\
LLVM_CONFIG := `pwd`/llvm-config
"

	# mrustc exploite llvm-config pour déterminer les chemins d'inclusion de llvm et autres.
	# Or llvm-config sort non seulement les options POUR llvm (du type -Icellvm/include), mais aussi celles QUI ONT PERMIS de compiler llvm;
	# si ce dernier a été compilé par un clang, nous avons des options incompatibles avec le gcc avec lequel on veut compiler présentement (en tout en +viamrustc)
	# Options: soit (pour ce seul fichier) relancer manuellement la compil avec clang++ (mais alors compatibilité du résultat avec le reste compilé g++?)
	# soit rendre un peu plus génériques les options de compil.
	# (env concerné: FreeBSD 11.2 avec un gcc 7.3 (pour mrustc), un clang 12.0.1, et un 7.1.0 (pour l'embarquement de son llvm en tant que llvm externe par rustc), lui-même comiplé par le 12.0.1)
	cat > llvm-config <<TERMINE
#!/bin/sh
$destllvm/bin/llvm-config "\$@" | sed \\
	-e 's# *-Wcovered-switch-default##g' \\
	-e 's# *-Wstring-conversion##g' \\
	-e 's# *-Werror=unguarded-availability-new##g'
TERMINE
	chmod a+x llvm-config
	# Sous la version cmake:
	#filtrer src/llvm/cmake/modules/HandleLLVMOptions.cmake grep -v Wcovered-switch-default
	#filtrer src/llvm/cmake/modules/HandleLLVMOptions.cmake grep -v Wstring-conversion
}

outpute()
{
	# minicargo écrase le LD_LIBRARY_PATH pour y ajouter 'output', mais en remplacement plutôt qu'en ajout. Résultat, minicargo, qui a besoin de libstdc++ ou libc++, est perdu.
	filtrer minicargo.mk sed -e "/LD_LIBRARY_PATH=/s#\$#:$LD_LIBRARY_PATH#"
	
	# De plus il mentionne pondre vers "output", ce qui plante toutes les tâches qui pondent vers ce dossier _après_ avoir fait un cd sousdossier:
	# output n'existe évidemment pas relativement à ce sousdossier.
	
	filtrer minicargo.mk sed -e '/OUTDIR *:=/s#\(:= *\)\([^/]\)#\1'"`pwd`"'/\2#'
}

targetClang()
{
	for programme in clang clang++
	do
		filtreargs "$programme" <<TERMINE
			# clang veut un triplet contenant le numéro de version de l'OS (sinon il croit qu'on cross-compile et ne va pas chercher ses includes standard, du genre clang++ --target=inconnu sur un #include <cinttypes> plante). Mais pour peu que cargo ait été compilé avec gcc ou je ne sais quoi d'autre qui a codé en dur le host, sans numéro de version, on est mal.
			--target=*[0-9].[0-9]*) argouille "\$1" ;;
			--target=*) argouille "\$1\`uname -r\`" ;;
TERMINE
	done
}

avecQuelquesWarnings()
{
	# La 1.16 Mac plante en compilant la 1.17 sur des histoires de "variable does not need to be mutable, #[warn(unused_mut)] on by default".
	filtrer src/bootstrap/lib.rs grep -v deny.\*warning
}

drapeaux()
{
	# Le configure omet d'utiliser CPPFLAGS.
	export CFLAGS="$CFLAGS $CPPFLAGS"
	export CXXFLAGS="$CXXFLAGS $CPPFLAGS"
	# Et tout ce petit monde n'est pas envoyé comme il faudrait au LLVM sous-jacent.
	filtrer configure sed -e '/LLVM_CX*FLAGS=/{
s/"//g
s#=\([^#]*\)#="\1 '"$CFLAGS"'"#
}'
}

macLibre()
{
	# Rust croit devoir forcer libc++ sur Mac. Sauf qu'elle n'est livrée qu'avec des clang récents. On supprime donc cette directive, et on laisse la détection trouver ce que bon lui semble.
	( IFS=: ; for i in $LD_LIBRARY_PATH ; do find "$i" -name 'libc++.*' ; done ) | grep -q . && return 0 || true
	filtrer src/bootstrap/lib.rs grep -v 'stdlib=libc'
}

makeSimple()
{
	for i in src/tools/compiletest/src/runtest.rs src/build_helper/lib.rs
	do
		filtrer "$i" sed -e 's/gmake/make/g'
	done
}

pasDIncludesDansLesFlags()
{
	# rust se compile un llvm. Malheureusement ce dernier se compile en $CXXFLAGS -Isrc/llvm/include: ses includes passent APRÈS ceux qu'on lui spécifie dans le CXXFLAGS. Ça tombe bien, normalement on aurait dû ne les spécifier que dans CPPFLAGS. Dont acte.
	CFLAGS="`echo " $CFLAGS" | sed -e 's/ -I.[^ ]*//g'`"
	CXXFLAGS="`echo " $CXXFLAGS" | sed -e 's/ -I.[^ ]*//g'`"
	# N.B.: pour satisfaire la bête on réagrégera dans drapeaux().
}

# Variables

archive="https://static.rust-lang.org/dist/rustc-$version-src.tar.gz"

destiner

export CPPFLAGS=
prerequis

manuel=non ; for param in "$@" ; do [ "x$param" = x--manuel ] && manuel=oui ; done
if [ $manuel = oui ]
then
cd /tmp/rustc-$version-src
echo "ALLEZ-Y" >&2
bash
else
if option viamrustc
then
	TMPP="$TMP"
	TMP="$TMP/`basename "$dest"`"
	mkdir -p "$TMP/$$"
	cd "$TMP"
fi

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do echo "$modif" ; $modif ; done

if option viamrustc
then
	# COPIE: mrustc
	target()
	{
		systeme=`uname -s | tr A-Z a-z`
		proc=`uname -m`
		case $systeme in
			darwin) marchand=apple ;; # À FAIRE: regarder si ce n'est pas là qu'il faudrait indiquer macos ou ios (pour les inclusions conditionnelles de libc/mod.rs, par exemple).
			linux) marchand=linux ; systeme=gnu ;;
			*) marchand=$systeme ;;
		esac
		case $proc in
			amd64) proc=x86_64 ;;
		esac
		cible="$proc-$marchand-$systeme`uname -r | cut -d - -f 1`"
	}
	
	SRCRUST="`pwd`"
	SRCRUST="`basename "$SRCRUST"`"
	
	cd ..
	mkdir -p bin output tools/bin
	cp "$destmrustc/bin"/* bin/
	( cd "$destmrustc/share/mrustc" && tar cf - . ) | tar xf -
	cp bin/minicargo tools/bin/
	# Et minicargo.mk n'a pas besoin de recontruire mrustc et minicargo, nom d'une pipe.
	touch -t 197910100830 vieux
	filtrer minicargo.mk sed -E -e '/(MINICARGO|MRUSTC).*:$/s/$/ vieux/' -e '/PHONY/s# [^ ]*(minicargo|mrustc)##g'
	
	# Mais pourquoi certaines commandes lancent-elles un x86_64-unknown-freebsd-gcc alors qu'il existe un x86_64-unknown-freebsd10.2-gcc?
	target
	prefixecible="$proc-unknown-$marchand"
	cat > tools/bin/$prefixecible-gcc <<TERMINE
#!/bin/sh
gcc "\$@"
TERMINE
	# cmake a un peu trop de prérequis pour qu'on les spécifie tous, on capitule.
	# À FAIRE: ne marche pas. Est-ce parce que cmake est aussi dans les prérequis post \\ ? Ou simplement parce qu'il redéfinit son PATH?
	# En tout cas il file nous chercher une OpenSSL 1.1.0 quand il a été compilé avec une 1.1.1.
	if [ -x "$INSTALLS/bin/cmake" ]
	then
		cat > tools/bin/cmake <<TERMINE
#!/bin/sh
export PATH="$INSTALLS/bin:$PATH" LD_LIBRARY_PATH="$INSTALLS/lib64:$INSTALLS/lib:$LD_LIBRARY_PATH"
cmake "\$@"
TERMINE
	fi
	chmod a+x tools/bin/$prefixecible-gcc
	export PATH="`pwd`/tools/bin:$PATH"
	
	( cd "$SRCRUST" && for f in rustc-$version-src.patch rust_src.patch ; do [ -f ../$f ] || continue ; patch -p0 < ../$f ; break ; done )
	# ARGH, le premier _build généré (build.rs -mrustc-> binaire lancé en guise de configure), pour pulldown-cmark, part en boucle infinie sur un pthread_mutex_lock.
	if [ $logiciel = libstdrust ]
	then
		make -f minicargo.mk LIBS
		sudoku cp output/*.hir "$destmrustc/share/mrustc/lib/"
		sudoku mkdir -p "$dest"
		sutiliser
		rm -Rf "$TMP/$$"
		exit 0
	fi
	if [ $AVEC_GCC = oui ]
	then
		export CC=gcc
		#export LDFLAGS="$LDFLAGS -L$INSTALLS/lib"
		# À la recherche du foutoir de dépendances de gcc.
		export LD_LIBRARY_PATH="$INSTALLS/lib:$LD_LIBRARY_PATH"
		export PATH="$INSTALLS/bin:$PATH"
	fi
	
	for modif in $modifsMC
	do
		$modif
	done
#env | sort > /tmp/1
#echo "VAS-Y COCO"
#bash
	# À ce stade, sur la compil de librust (fichier .c généré de 600 Mo!), mrustc bouffe 2 Go de RAM, puis lance SANS LIBÉRER SES 2 Go gcc qui monte à 7 Go; résultat, swap explosé, la machine plante (sans arriver à tuer gcc: sur certaines vieilles versions de FreeBSD c'est le même composant noyau qui alloue et qui purge les pages donc quand il est sursollicité à allouer il est incapable de purger en parallèle; cf. https://forums.freebsd.org/threads/exploring-swap-on-freebsd.78418/, bien qu'apparemment ça concerne les < 11 alors que je suis en 11.2).
	# gcc @./output/rustc-build/librustc.so_cmd.txt
	# Même en virant le -g, on explose les limites.
	# Et encore, a priori c'est post optimisation (https://github.com/thepowersgang/mrustc/issues/143).
	# NOUS SOMMES DONC COINCÉS, en attente d'une segmentation des .o
	make -f minicargo.mk
	make -C run_rustc
	
	if false
	then
	ici="`pwd`"
	cd "$TMP/mrustc.git-$version_mrustc".*
	rm -Rf ./rustc-$version-src
	mv "$ici" ./
	# https://github.com/thepowersgang/mrustc/issues/28; tools/ est deprecated paraît-il.
	if false ; then
	sed -e "s/-nightly/-$version-src/g" -e "s#overrides/nightly-[^/]*/#overrides/stable-$version-linux/#g" < tools/build_rustc_with_minicargo.sh > tools/build_rustc_with_minicargo.$version.sh
	chmod a+x tools/build_rustc_with_minicargo.$version.sh
	( cd tools && ./build_rustc_with_minicargo.$version.sh )
	else
		make -f minicargo.mk RUST_CHANNEL=stable RUSTC_VERSION="$version" OVERRIDE_SUFFIX=-linux
	fi
	fi
else

echo Configuration… >&2
./configure --prefix="$dest" $OPTIONS_CONF

echo Compilation… >&2
make -j 4
fi
fi

echo Installation… >&2
# Rust refuse de bosser en root.
#sudo make install
sudo mkdir "$dest"
sudo chown "`id -u`:`id -g`" "$dest"
make install
sudo chown -R 0:0 "$dest"
sutiliser "$logiciel-$version"

rm -Rf "$TMP/$$"
