#!/bin/sh
# Copyright (c) 2004,2009 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

SCRIPTS="`command -v "$0"`" ; [ -x "$SCRIPTS" -o ! -x "$0" ] || SCRIPTS="$0" ; case "`basename "$SCRIPTS"`" in *.*) true ;; *sh) SCRIPTS="$1" ;; esac ; case "$SCRIPTS" in /*) ;; *) SCRIPTS="`pwd`/$SCRIPTS" ;; esac ; delie() { while [ -h "$SCRIPTS" ] ; do SCRIPTS2="`readlink "$SCRIPTS"`" ; case "$SCRIPTS2" in /*) SCRIPTS="$SCRIPTS2" ;; *) SCRIPTS="`dirname "$SCRIPTS"`/$SCRIPTS2" ;; esac ; done ; } ; delie ; SCRIPTS="`dirname "$SCRIPTS"`" ; delie
. "$SCRIPTS/util.sh"

sep="`printf '\003'`"

logiciel=boost

v 1.45.0 && prerequis="icu python" && modifspostconfig="python105" && modifs="sanspch dyld105 dyld105bis optionsBjam" # La directive "compatible Mac OS X 10.5" (cf Compilation), avec laquelle bjam est censé tout gérer, oublie un petit bout.
v 1.52.0 && true # On laisse les modifs actuelles.
v 1.57.0 && modifs="optionsBjam" || true
v 1.63.0 && modifs="optionsBjam toolset pythonPatate" || true
v 1.69.0 || true

# Modifications

pythonPatate()
{
	# Ces gros malins de Python croient intelligents de #define isupper et autres fonctions, soi disant parce que FreeBSD en fait trop et donc pour être conservateurs ils préfèrent la rediriger vers to iswupper. Sauf que du coup ça explose std::, qui définit des std::isupper surchargés par le #define.
	filtrer "./boost/python/detail/wrap_python.hpp" sed -e '/include *<Python.h>/{
a\
#undef toupper
a\
#undef tolower
a\
#undef isspace
a\
#undef isupper
a\
#undef islower
a\
#undef isalpha
a\
#undef isalnum
}'
}

toolset()
{
	filtrer bootstrap.sh sed -e 's#| darwin |#| clang | darwin |#'
}

sanspch()
{
	# Quand on compile pour plusieurs archis en même temps, difficile de faire de l'en-tête précompilé qui marche partout… Mac OS X s'y casse de toute façon les dents, en essayant de faire un lipo sur des fichiers vides (eh oui, que de l'en-tête!).
		filtrer tools/build/v2/tools/darwin.jam grep -v "generators.override darwin.compile.c++.pch"
		filtrer tools/build/v2/tools/darwin.jam grep -v "generators.override darwin.compile.c.pch"
		filtrer tools/build/v2/tools/darwin.jam sed -e '/toolset.inherit-generators/s/ ;/ gcc.compile.c.pch gcc.compile.c++.pch ;/'
}

dyld105bis()
{
	mac || return 0
	filtrer tools/build/v2/tools/darwin.jam sed \
	  -e "/-dynamiclib/s##-dynamiclib $LDFLAGS#" \
	  -e "s#-isysroot [^ ]*#$MACOSXVERSIONFLAGS#g" \
	  -e "s#-mmacosx-version-min=[^ ]*#$MACOSXVERSIONFLAGS#g"
}

python105()
{
	filtrer project-config.jam sed -e '/python/s/2.6/2.5/g' # Python 2.5 est à la fois sur 10.6 et 10.5.
}

pourMac()
{
	mac || return 0
	optionsBjam="address-model=32_64 architecture=combined macosx-version=10.5"
}

optionsBjam()
{
	optionsBjam="linkflags=$LDFLAGS${sep}cflags=$CFLAGS${sep}cxxflags=$CXXFLAGS"
}

# Variables

dest="$INSTALLS/$logiciel-$version"
archive="http://heanet.dl.sourceforge.net/project/$logiciel/$logiciel/$version/${logiciel}_`echo $version | tr . _`.tar.bz2"
archive="https://netix.dl.sourceforge.net/project/boost/boost/$version/boost_`echo $version | tr . _`.7z"

destiner

prerequis

echo Obtention et décompression… >&2
obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
./bootstrap.sh --prefix="$dest"
for modif in true $modifspostconfig ; do $modif ; done

echo Compilation… >&2
# Ici il faudrait vérifier que l'ulimit n'est pas trop basse. En outre, alors que GCC 4.2 arrive à tourner sur une petite machine à 512 Mo de RAM (et à peu près autant en swap) en -j4, GCC 4.9 bouffe jusqu'à 1 Go par compil. Donc une seconde passe en -j1.
IFS="$sep"
tifs ./bjam -j4 $optionsBjam

echo Installation… >&2
IFS="$sep"
tifs sudo ./bjam $optionsBjam install

sutiliser
