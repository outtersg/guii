#!/bin/sh
# Copyright (c) 2005 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Chemin de compilation pour un FreeBSD 11.2 (clang 6): clang "< 9", cmake, clang (12) (le cmake car la détection d'absence de git, qui faisait une simple alerte dans cmake lié à clang 6, fait alerte + core dump sur cmake lié à clang 8).
# Chemin de compilation pour un FreeBSD 10.2 (clang 3.5): clang 3.7.1, clang 3.9.1.
# Chemin de compilation pour un FreeBSD 8 (gcc 4.2): gcc 4.8, clang 3.3 sans lldb, clang 3.4.2 sans lldb #, clang 3.5 en ajoutant --enable-libcpp au configure.
# Chemin de compilation pour un Mac OS X 10.6 (clang 3.5svn): gcc 4.9.2, clang 3.6 sans lldb (et libcxx et libcxxabi sont ignorées) #, clang 3.6.
# Chemin de compilation pour un Mac OS X 10.8 (clang 3.5svn): gcc 4.9.4, clang 3.4.2, clang 3.5.2, clang 3.7.1, clang 3.9.1.
# Attention, quand on a déjà un llvm-3.9.1 d'installé, et qu'on essaie de compiler un llvm+clang 3.9.1, pour je ne sais quelle raison, seul le llvm se compile, argh.

v 3.3 || true
v 3.4.2 && modifs="pasTropOptim macMath stdcppPasTropEnDur sansOcaml" || true # Ne compile pas avec gcc 4.7.4 (même erreur que https://bugs.gentoo.org/show_bug.cgi?id=515882)
v 3.5.0 && modifs="$modifs strtoll" || true # A un petit problème avec strtoll.
v 3.5.2 || true
v 3.6.0 && modifs="$modifs sansCodecvt pathMax ocloexec gccframework complications" && prerequis="swig \\ " || true
v 3.6.2 || true
v 3.7.1 && modifs="pasTropOptim macMath ocloexec alignementBiblios" && prerequis="make python >= 2.7 \\" || true
# build external machin: https://www.bountysource.com/issues/29603185-compiler-rt-is-built-with-the-wrong-toolchain-bootstrap-compiler-rather-than-built-clang-linking-fails-when-using-clang-older-than-3-5-eg-mavericks-and-earlier-xcodes. Ne sera plus valable en 4.0 et suivants.
v 3.9.1 && modifsDyn="pasTropOptim macMath macLibtool unwind" && modifs="$modifsDyn llvmStrnlen" && prerequis="cmake \\" && OPTIONS_CMAKE="-DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON" || true
v 4.0.0 || true
v 4.0.1 || true
v 5.0.0 || true
v 5.0.1 && modifs="$modifs emmintrim" || true # Tout à la fin, que l'on compile avec un 3.9.1 ou un 4.0.1: make[2]: *** [tools/clang/runtime/CMakeFiles/compiler-rt.dir/build.make:107: tools/clang/runtime/compiler-rt-stamps/compiler-rt-configure] Segmentation fault (core dumped); si on relance, il finit sa compil + install.
v 5.0.2 || true
v 6.0.0 || true
v 6.0.1 && prerequis="python >= 3 cmake \\" || true
v 7.0.1 || true
v 7.1.0 || true
v 8.0.1 || true
v 9.0.1 && modifs="$modifs sansChar8T quandMemeCxxISystem" || true
v 10.0.1 || true
v 11.1.0 && modifs="$modifs maxAlign" || true
v 12.0.0 || true
v 12.0.1 || true
v 13.0.0 || true
v 13.0.1 || true

lieur()
{
	# Compiler un 12 avec un 8, sur un FreeBSD 11.2 avec le ld par défaut (GNU ld 2.17.50 [FreeBSD] 2007-07-03) pète (à 97%, grrr) sur l'édition de liens. Possibilités à tester:
	# 1. binutils plus récent
	# 2. gold
	# 3. lld (https://wiki.freebsd.org/LLD)
	# À FAIRE: en fait la condition est: si celui par lequel on compile n'est pas celui système.
	pge $version 6 || return 0
	[ `uname` = FreeBSD ] || return 0
	
	local lieur=binutils # Solution 1.
	#lieur="clang+lld < $version"
	
	[ -z "$lieur" ] || prerequis="$lieur \\ $prerequis"
}

lieur

case `basename "$0"` in
	clang)
		argOptions="`options "$argOptions=libcxx"`"
		option libcxx || true
		;;
esac

archive()
{
	local l="$1" v="$version"
	case "$l" in
		compiler-rt|lldb)
			case "$version" in
				3.4.*) v="`deux() { echo "$1.$2" ; } ; IFS=. ; deux $version`" ;;
			esac
			;;
	esac
suffixe=xz
pge $version 3.5 || suffixe=gz
	case "$version" in
		[0-7].*) echo http://llvm.org/releases/$v/$l-$v.src.tar.$suffixe ;;
		*) echo https://github.com/llvm/llvm-project/releases/download/llvmorg-$v/$l-$v.src.tar.$suffixe ;;
	esac
}

archive="`archive llvm`"

# Modifs.

maxAlign()
{
	option libcxx || return 0
	
	# À partir de la 11, max_align_t n'est plus définie dans libcxx, qui repose intégralement sur la définition C système.
	# La partie C (clang) a son propre __stddef_max_align_t.h interne, mais libc++ le contourne soigneusement pour taper directement /usr/include.
	# Sauf que ce max_align_t n'a été défini sous FreeBSD qu'en 10.4:
	# - https://www.freebsd.org/releases/10.4R/relnotes/
	# - https://svnweb.freebsd.org/base?view=revision&revision=309258
	# - https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=210890
	# - https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=193594
	# Donc un FreeBSD antérieur avec une libc++ postérieure perd les pédales.
	# Or les versions suivantes de C++ en ont besoin inconditionnellement (ex. en C++17: https://man.freebsd.org/cgi/man.cgi?query=gcc10&apropos=0&sektion=0&manpath=FreeBSD+12.2-RELEASE+and+Ports&arch=default&format=html)
	# Cf. aussi using_if_exists dans https://www.mail-archive.com/search?l=bug-gnulib@gnu.org&q=subject:%22no%5C-c%5C%2B%5C%2B%22&o=newest&f=1 (qui dit que 12 et 13 étaient d'une façon)
	# et https://reviews.llvm.org/D131425?id=476753
	for f in $projects/libcxx/include/cstddef $projects/libcxx/include/stddef.h
	do
		filtrer "$f" awk '{print}/#include.*stddef.h/{print"#ifndef __GCC_MAX_ALIGN_T";system("cat '"$tools"'/clang/lib/Headers/__stddef_max_align_t.h");print"#endif"}'
	done
}

pasTropOptim()
{
	# Certains vieux BSD ont un clang++ qui plante en -O3
	case "`command -v "$CXX" 2> /dev/null || true`" in
		"$INSTALLS"/*) return ;; # Si c'est un à nous on l'estime bien compilé.
	esac
	case "`uname`" in
		FreeBSD) true ;;
		*) return ;;
	esac
	export CXXFLAGS="`printf %s "$CXXFLAGS" | sed -e 's/-O3/-O1/g'`"
	export CFLAGS="`printf %s "$CFLAGS" | sed -e 's/-O3/-O1/g'`"
	livrable=Debug
}

trouverBiblio()
{
	local d s chem="$LD_LIBRARY_PATH:/usr/lib64:/usr/lib" # On code en dur ces chemins, que tous les compilos intègrent même si les GuiLI, stricts, l'ont exclus.
	IFS=:
	for d in $chem
	do
		for s in .so .dylib
		do
			[ -e "$d/$1$s" ] && echo "$d/$1$s" && break || true
		done
	done
	unset IFS
}

quandMemeCxxISystem()
{
	# Dans compilo_cheminLibcxxClang(), on a exclu clang du -cxx-isystem, censé ne pas servir à grand-chose
	# puisque 1. clang est compilé avec le précédent clang censé savoir fouiller dans ses propres en-têtes
	# et 2. on se dit que ça ne sert pas à grand-chose, si celui en train d'être compilé (mettons un 9) fait un #include_next, le #ifndef _STDTRUC_INCLUDED_ du 8 après le #define _STDTRUC_INCLUDED_ du 9 fera que rien du .h du 8 ne sera de toute façon exploité.
	# … Mais en vrai certains fichiers ne compilent pas ainsi (la stdlib d'/usr/include est trop ancienne).
	# Pour eux on doit donc restaurer le -cxx-isystem
	# (mais pas pour tout le monde: les couches basses (LLVM) se vautrent à 10% de la compil si elles ont du -cxx-isystem, tandis que notre clangFormat est aux 87%)
	
	modifsPostConf="$modifsPostConf _quandMemeCxxISystem"
	_quandMemeCxxISystem()
	{
		for f in \
			tools/clang/lib/Format/CMakeFiles/obj.clangFormat.dir/flags.make \
			tools/clang/tools/libclang/CMakeFiles/libclang.dir/flags.make \
			tools/clang/utils/TableGen/CMakeFiles/obj.clang-tblgen.dir/flags.make \
			tools/llvm-profdata/CMakeFiles/llvm-profdata.dir/flags.make
		do
			filtrer "$f" sed -e "s#-std=c++#-cxx-isystem $LIBCXX_INCLUDES -cxx-isystem /usr/include &#"
		done
	}
}

sansChar8T()
{
	# https://github.com/llvm/llvm-project/issues/42070
	# https://github.com/llvm/llvm-project/issues/43094
	# libc++abi s'attend à pouvoir exporter des symboles char8_t (introduction récente de C++), suivant un mécanisme assez complexe (libc++abi exporte les symboles de libc++?);
	# sauf que quand il se compile la première fois, libc++ n'est pas encore compilée, et donc il repose sur la libc++ système… qui est trop vieille pour contenir du char8_t!
	# Pour pallier on effectue donc plusieurs compils (d'abord libc++abi sans char8_t liée à la libc++ système, puis on recompile le tout avec le clang++ tout juste compilé et oh miracle les symboles apparaissent!)
	
	# Détection de ce qui est disponible.
	# echo "int main(int argc, char ** argv) { char8_t c = 0; return 0; }" > /tmp/1.cpp ; compilable_cxx -c /tmp/1.cpp
	# Mais apparemment ne marche pas: même sur un clang++ qui marchait ça ne donne rien.
	# Le plus fiable reste d'aller egreper l'expression sur nm -o libc++abi.so/.dylib.
	local libcxxabi="`trouverBiblio libc++abi`"
	if [ -z "$libcxxabi" ] || egrep -q '_ZT[IS]P?K?Du' < "$libcxxabi" ; then return ; fi
	
	# On tente du similaire à https://askcodez.com/comment-construire-libcxx-et-libcxxabi-par-clang-sur-centos-7.html
	
	gris "La libc++abi de départ ne connaît pas char8_t. Première passe en mode dégradé, puis on recompilera." >&2
	
	cp projects/libcxxabi/lib/itanium-base.exp projects/libcxxabi/lib/itanium-base-v2.exp
	filtrer projects/libcxxabi/lib/itanium-base.exp egrep -v '_ZT[IS]P?K?Du'
	
	modifsPostCompil="$modifsPostCompil _sansChar8T"
	_sansChar8T()
	{
		cp ../projects/libcxxabi/lib/itanium-base-v2.exp ../projects/libcxxabi/lib/itanium-base.exp
		touch ../projects/libcxxabi/src/*.cpp
		grep -rl /bin/clang projects/libcxxabi | while read f ; do filtrer "$f" sed -e "s#[-+_/.a-zA-Z0-9]*/bin/clang#`pwd`/bin/clang#g" ; done
		make -j4
	}
}

# (utilisée avec multiarch())
# Sur les systèmes multi-architectures (ex.: Mac OS X), clang détermine pour quelles architectures se compiler en fonction des archis supportées par le ld système; mais libc++ ne se compile par défaut que pour l'architecture par défaut. Et comme clang est écrit en C++, il requiert libc++. Autrement dit, un llvm + clang + libc++ compilé avec le clang système (multi-arch) et les options par défaut sera incapable de compiler un nouveau llvm + clang.
multiarchConfigurer()
{
	case "$multiarch_arch" in
		i386) OPTIONS_CMAKE="$OPTIONS_CMAKE -DLIBCXX_BUILD_32_BITS=ON" ;; # Pas besoin de LLVM_BUILD_32_BITS=ON pour les binaires, seule libc++ nous intéresse.
	esac
}

emmintrim()
{
	# Pourquoi ne trouve-t-il pas l'emmmintrim.h qui est pourtant embarqué à la fois dans le source, et dans les clang précédemment installés? Bon, on l'aide.
	# Cependant on ne peut inclure celui du source, sous peine d'incompatibilité 
	
	#export CPPFLAGS="$CPPFLAGS -I`pwd`/tools/clang/lib/Headers"
	
	true
}

unwind()
{
	# En compil LLVM seul, pas besoin.
	
	[ -d projects/libcxxabi/src ] || return 0
	
	# Si le système n'a pas d'unwind.h (ex.: FreeBSD 10.2), il nous faut au moins une déclaration générique pour qu'il compile.
	# http://lists.llvm.org/pipermail/llvm-dev/2015-November/092336.html
	# http://clang-developers.42468.n3.nabble.com/libcxxabi-Which-unwind-h-td3230734.html
	
	# Si possible on repose sur l'unwind.h système. Et d'ailleurs s'il existe on ne le surcharge surtout pas, sous peine de finir avec des incompatibilités d'#include_next.
	echo '#include <unwind.h>' > /tmp/1.c
	$CC -c -o /tmp/1.o /tmp/1.c && return 0 || echo "unwind.h introuvable, récupération d'un unwind.h générique" >&2
	
	# Si possible on repose sur l'unwind.h système. Et d'ailleurs s'il existe on ne le surcharge surtout pas, sous peine de finir avec des incompatibilités d'#include_next.
	echo '#include <unwind.h>' > /tmp/1.c
	$CC -c -o /tmp/1.o /tmp/1.c && return 0 || echo "unwind.h introuvable, récupération d'un unwind.h générique" >&2
	
	cp tools/clang/lib/Headers/unwind.h projects/libcxxabi/src/
	# S'agit-il bien de http://download.savannah.nongnu.org/releases/libunwind/ comme indiqué dans la précédente URL "which unwind"?
}

sansOcaml()
{
	# Ocaml en 3.4.2 se compile, embarque dans clang des symboles liés à ocaml, puis n'arrive pas à embarquer la biblio qui va bien pour ces symboles. Ne cherchons pas, dégommons.
	filtrer configure sed -e '/BINDINGS_TO_BUILD/{
s/ocaml/pasocaml/g
s/pasocaml)/ocaml)/g
s/pasocaml/ /g
}'
}

strtoll()
{
	# Sous FreeBSD 8.2, strtoull est déclarée dans stdlib.h (qu'on ne peut inclure, car durant la compil c'est celui interne qui surcharge), et définie dans libc (ce qui n'est pas détecté, donc on se raccroche à une biblio qu'on sait ajoutée par le configure).
	filtrer configure sed -e 's/"-lz/"-lc -lz/'
	for i in lib/TableGen/TGLexer.cpp utils/unittest/googletest/src/gtest-internal-inl.h
	do
		[ -e "$i" ] && filtrer "$i" sed -e '/namespace/i\
extern "C" { long long strtoll(const char * nptr, char ** endptr, int base); unsigned long long strtoull(const char * nptr, char ** endptr, int base); }
' || true
	done
}

stdcppPasTropEnDur()
{
	# clang code en dur les chemins dans lesquels il cherche ses include système pour lib(std)c++ (cf. lib/Driver/ToolChains.cpp).
	[ -e ./tools/clang/lib/Driver/ToolChains.cpp ] || return 0 # Pour un llvm sans clang, ce fichier n'existe pas.
	patch -p0 <<TERMINE
--- ./tools/clang/lib/Driver/ToolChains.cpp	2014-12-15 19:36:49.000000000 +0100
+++ ./tools/clang/lib/Driver/ToolChains.cpp	2014-12-15 19:49:40.000000000 +0100
@@ -2560,10 +2560,23 @@
 
   switch (GetCXXStdlibType(DriverArgs)) {
   case ToolChain::CST_Libcxx:
+			addSystemInclude(DriverArgs, CC1Args, getDriver().SysRoot+"/usr/local/include/c++/v1");
     addSystemInclude(DriverArgs, CC1Args,
                      getDriver().SysRoot + "/usr/include/c++/v1");
     break;
   case ToolChain::CST_Libstdcxx:
+			if(GCCInstallation.isValid())
+			{
+				StringRef LibDir = GCCInstallation.getParentLibPath();
+				//const Multilib &Multilib = GCCInstallation.getMultilib();
+				//const std::string GCCMultiarchTriple = getMultiarchTriple(GCCInstallation.getTriple(), getDriver().SysRoot);
+				//const std::string TargetMultiarchTriple = getMultiarchTriple(getTriple(), getDriver().SysRoot);
+				//StringRef TripleStr = GCCInstallation.getTriple().str();
+				const GCCVersion &Version = GCCInstallation.getVersion();
+				
+				addSystemInclude(DriverArgs, CC1Args, LibDir.str()+"/../include/c++/"+Version.Text);
+				return;
+			}
     addSystemInclude(DriverArgs, CC1Args,
                      getDriver().SysRoot + "/usr/include/c++/4.2");
     addSystemInclude(DriverArgs, CC1Args,
TERMINE
}

sansCodecvt()
{
	# La compil présume la présence d'un Mac OS X un peu trop récent, même sur de vieux OS.
	filtrer tools/lldb/include/lldb/Host/Editline.h sed -e '/include.*codecvt/d' -e 's/define LLDB_EDITLINE_USE_WCHAR 1/define LLDB_EDITLINE_USE_WCHAR 0/'
}

pathMax()
{
	filtrer tools/lldb/source/Host/common/FileSpec.cpp sed -e "`grep -n '#include' < tools/lldb/source/Host/common/FileSpec.cpp | tail -1 | cut -d : -f 1`{"'
a\
#if !defined(PATH_MAX)
a\
#define PATH_MAX 1024
a\
#endif
}'
}

alignementBiblios()
{
	# http://clang-developers.42468.n3.nabble.com/libc-std-cout-alignment-trouble-was-Re-llvm-r240144-SLP-Vectorize-for-all-constant-entries-td4047983.html et https://reviews.llvm.org/D16145: on pète le cout, du coup ce clang crée des libcxx (par exemple si on l'utilise pour compiler une 3.9.1) qui ne peuvent être liées avec rien sans générer du SIGBUS sur déclaration de cout.
	cat "`obtenir 'https://reviews.llvm.org/file/data/o6gjjjurg5id7u7xz5n4/PHID-FILE-k3st7u3bca6bv7ro75sm/D16145.diff' llvm.d16145.diff`" | patch -l -p2 || true
}

ocloexec()
{
	grep -rq O_CLOEXEC /usr/include 2> /dev/null || filtrer tools/lldb/source/Host/posix/PipePosix.cpp sed -e 's/O_CLOEXEC/0/g'
}

gccframework()
{
	# Si l'on compile mettons un LLVM 3.6 sur un Mac OS X 10.6 sur lequel on a recompilé un GCC 4.9, LLVM ayant quelques spécificités pour Mac du genre se lier à CoreFoundation, et GCC n'ayant pas de chemin de framework par défaut, il va falloir indiquer à ce dernier ce que le (llvm-)gcc livré par Apple fait en standard.
	CPPFLAGS="$CPPFLAGS -F/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks"
	LDFLAGS="$LDFLAGS -F/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks"
	export CPPFLAGS LDFLAGS
}

complications()
{
	# LLVM_HAS_VARIADIC_TEMPLATES est utilisé si l'on compile avec un LLVM récent. Sur nos installs qui compilent avec un GCC 4.9, ça devrait pouvoir passer aussi. Et l'alternative figurant dans le code source est un truc hyper complexe utilisant des constructions qui paraissent invalides, donc mieux vaut essayer de faire propre. On considère qu'on est toujours en LLVM_HAS_VARIADIC_TEMPLATES.
	# Cf. aussi http://llvm.org/viewvc/llvm-project?view=revision&revision=229324
	# Note: ceci n'est peut-être plus nécessaire maintenant que l'on a un GCC avec https://github.com/gcc-mirror/gcc/commit/96d7f12983e561307f222a6d75627a3d7298ab35
	filtrer include/llvm/ADT/SmallVector.h sed -e 's/LLVM_HAS_VARIADIC_TEMPLATES/1/g'
	
	# Bon alors là ça ne passe pas. Les Blocks, côté GCC, bof bof. On préfère laisser de côté lldb pour le moment, et revenir le compiler une fois qu'on aura un clang fonctionnel.
	#filtrer tools/lldb/source/Host/macosx/Host.mm sed -e 's/_handler (source, ^{/_handler_f (source, [](dispatch_source_t source){/'
}

option dyn || true

destiner

prerequis

manuel=non ; for param in "$@" ; do [ "x$param" = x--manuel ] && manuel=oui ; done
if [ $manuel = oui ]
then
	echo "# VOUS ÊTES DANS UN TERMINAL: À VOUS DE JOUER"\! >&2
	cd /tmp/llvm-$version.src
	for modif in true $modifsDyn ; do $modif ; done
	[ -d bouild ] && cd bouild || true
	[ -d build ] && cd build || true
	bash
else

pg 3.9.1 $version || multiarch

obtenirEtAllerDansVersion

integrer()
{
	ici="`pwd`"
	( obtenirEtAllerDans "`archive "$2"`" && rm -Rf "$ici/$1" && mv "`pwd`" "$ici/$1" )
}
if [ "`basename "$0"`" = clang ] ; then
modulesClang()
{
	local moduleClang=clang
	pge $version 9 || moduleClang=cfe
	integrer tools/clang          $moduleClang
integrer projects/compiler-rt compiler-rt
	if option libcxx
	then
integrer projects/libcxx      libcxx
! pge $version 3.5 || integrer projects/libcxxabi libcxxabi
	fi
# lldb doit être compilé à part, car il requiert libc++ qui elle-même ne peut être compilé qu'après le compilo.
# Pose problème sur Mac en 3.6 tant que l'on n'a pas un premier clang (utilise des trucs absolument tordus).
	if option lldb ; then integrer tools/lldb lldb ; fi
	if option lld ; then integrer tools/lld lld ; fi
}
modulesClang
fi

livrable=Release

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
# Souci sous FreeBSD 8: en créant un clang via gcc, le clang généré est incapable de créer un nouveau clang (>= 3.5) car il est fait appel à <cmath>; et pour celui-ci, soit on utilise les en-têtes clang (mais alors ils déclarent std::log2 comme un appel à log2, qui est déclarée en #if 0 dans le math.h de FreeBSD 8), soit on prend ceux de GCC (qui utilisent un __builtin_log2, embarqué par GCC, mais les include comportent des directives non reconnues de clang). Le clang généré arrive par contre à se lier à la libstdc++, si l'on avait les bons .h on pourrait faire quelque chose (un .c compilé en clang -o 1 -lstdc++ 1.c est capable d'utiliser coshl pourvu qu'on la lui ait définie en haut, sans inclusion).
#pge $version 3.5 && OPTIONS_CONF="$OPTIONS_CONF --enable-libcpp" && CXX="clang -stdlib=libc++" && export CXX || true
false && pge $version 3.5 && CC=gcc && CXX=g++ && export CC CXX || true
if pge $version 3.9
then
	mkdir -p build
	cd build
	# -DBUILD_SHARED_LIBS=ON: bof, ça triple le temps d'exécution par rapport au clang système (sur un petit .cxx: g++ 11 0,5 s; /usr/bin/clang++ 0,6 s; clang++ divers sans -O3 1,6 à 2 s; clang++ 13 avec -O3 0,7 s).
	# https://reviews.llvm.org/D61804
	option dyn && OPTIONS_CMAKE="$OPTIONS_CMAKE -DBUILD_SHARED_LIBS=ON" || true
	cmake \
		-DCMAKE_INSTALL_PREFIX="$dest/" \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DCMAKE_C_FLAGS="$CPPFLAGS $CFLAGS" \
		-DCMAKE_CXX_FLAGS="$CPPFLAGS $CXXFLAGS" \
		-DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
		-DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
		-DCMAKE_MODULE_LINKER_FLAGS="$LDFLAGS" \
		-DCMAKE_BUILD_TYPE=$livrable \
		$OPTIONS_CMAKE \
		..
else
configure="./configure"
pge $version 3.7 && mkdir -p bouild && cd bouild && configure="../configure" || true
$configure --prefix="$dest" --enable-optimized --enable-shared $OPTIONS_CONF
fi

fi # manuel

for modif in true $modifsPostConf ; do $modif ; done

echo Compilation… >&2
make -j 4 #|| make -j 4 || make -j 4 || ( echo "# Parfois il faut relancer une seconde fois (le -j 4 s'emmêle les pédales). Pour la seconde fois, passez le if false en true." >&2 ; exit 1 )

for modif in true $modifsPostCompil ; do $modif ; done

echo Installation… >&2
sudo make install
# Certains utilisateurs de llvm (ex.: rust) ont besoin d'avoir accès aux outils intermédiaires de llvm.
[ -e bin/FileCheck ] && sudo cp bin/FileCheck "$dest/bin/" || true

# Pas de compil' libc++: en versions avant cmake, le Makefile de libcxx laisse penser qu'il va s'installer comme un cochon dans /usr/lib; et en cmake (3.9.1, par exemple), elle a été compilée en même temps que clang.

# À FAIRE: si nous sommes clang, nous pouvons aussi créer un alias (lien symbolique) llvm+clang-x.y.z -> clang-x.y.z,
# car nous en sommes un surensemble et les logiciels cherchant llvm devraient pouvoir nous trouver (ex.: mesa).

sutiliser
