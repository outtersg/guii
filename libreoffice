#!/bin/sh
# Copyright (c) 2006 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

#SCRIPTS="`command -v "$0"`" ; [ -x "$SCRIPTS" -o ! -x "$0" ] || SCRIPTS="$0" ; case "`basename "$SCRIPTS"`" in *.*) true ;; *sh) SCRIPTS="$1" ;; esac ; case "$SCRIPTS" in /*) ;; *) SCRIPTS="`pwd`/$SCRIPTS" ;; esac ; delie() { while [ -h "$SCRIPTS" ] ; do SCRIPTS2="`readlink "$SCRIPTS"`" ; case "$SCRIPTS2" in /*) SCRIPTS="$SCRIPTS2" ;; *) SCRIPTS="`dirname "$SCRIPTS"`/$SCRIPTS2" ;; esac ; done ; } ; delie ; SCRIPTS="`dirname "$SCRIPTS"`" ; delie
DelieS() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) s="`pwd`/$s" ;; esac ; DelieS ; s="`dirname "$s"`" ; DelieS ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"
. "$SCRIPTS/util.guili.nss.sh"

# Historique des versions gérées

OPTIONS_CONF=
v 4.4.2.2 && modifs="enTetesPoppler log10 vraiSh" && prerequis="patch bison pkgconfig \\ gperf >= 3 boost libxslt flex >= 2.5.35 zip python >= 3" || true
v 5.0.0.5 && modifs="enTetesPoppler log10 vraiSh" || true
# Première version qui accepte le GL qu'on lui propose (grâce à glew 2.0.0).
v 5.3.1.1 && modifs="log10 vraiSh enTetesNss mesa eteteComplet cluceneFbsd pythonPatate sansTestServices boostMentionne" && prerequis="patch bison automake libtool 2.4.2 pkgconfig \\ zip python >= 3 boost >= 1.47 nspr nss curl lcms cairo icu harfbuzz mesa glew >= 2 glu postgresql 9.2.1 coinmp 1.7.6 libxml neon 0.30.1 clucene fontconfig >= 2.4.1" || true
# v_libtool à faire varier entre 2.4.6 et 2.4.2, car certains bouts sont restés en 2.4.2 et pètent s'ils sont compilés par un 2.4.6. Donc pour aller jusqu'au bout, il faut commencer avec l'une, changer quand ça pète pour faire passer le point de blocage, rebasculer, etc.
v 5.3.1.2 && modifsDyn="libtoolAdaptatif enTetesNss" && modifs="$modifsDyn log10 vraiSh mesa eteteComplet cluceneFbsd pythonPatate sansTestServices boostMentionne envpourri" && prerequis="patch bison automake libtool $v_libtool pkgconfig \\ zip python >= 3 boost >= 1.47 nspr nss curl lcms cairo icu harfbuzz mesa glew >= 2 glu postgresql 9.2.1 coinmp 1.7.6 libxml neon 0.30.1 clucene fontconfig >= 2.4.1" || true
v 5.3.2.2 || true
v 5.4.6.2 || true
# OpenSSL < 1.1 car CryptTools.cppxx repose sur evp_cipher_ctx_st passé en opaque en 1.1 (https://unix.stackexchange.com/questions/477481/evp-cipher-ctx-in-openssl-1-1-x).
# harfbuzz tout à la fin (qui est le plus prioritaire), car LibreOffice veut absolument une harfbuzz+graphite, par contre il se fiche d'avoir un cairo+harfbuzz. Donc il faut que le chemin d'harfbuzz+graphite passe avant celui de l'harfbuzz qui pourrait être ramené par cairo mais sans graphite. Bon idéalement il faudrait harfbuzz+cairo+fontconfig+graphite+icux (c'est possible, j'en ai un sur ma machine, bien que je ne sache comment il a réussi à se compiler avec toutes ces options).
v 6.1.5.1 && modifsPostTel="fbsdSansAucunGL" && modifs="$modifs pasetime pthread_np prioPasConst sysmacros cheminOpenssl tribool opensslOuNss inclusionsNssLocales lepoxy selectionhandlers sansMenageOpenSsl sansMenageExceptions" && prerequis="patch bash bison automake libtool $v_libtool pkgconfig \\ zip python >= 3 boost >= 1.47 nspr nss curl libjpegturbo lcms cairo >= 1.2.0 icu mesa glew >= 2 glu postgresql+ossl10 9.2.1 coinmp 1.7.6 libxml neon 0.30.1 clucene fontconfig >= 2.4.1 openssl < 1.1 libepoxy mariadb poppler+xpdf xmlsec+nss harfbuzz+icu+graphite >= 0.9.42" || true
v 6.2.2.1 || true

# Ma version Freetype, embarquée par Harfbuzz si elle a été détectée, requiert bzip2 mais n'en fait pas état. Zut.
versions freetype && prerequis="$prerequis bzip2" && export LDFLAGS="$LDFLAGS -lbz2" || true

argOptions="$argOptions+ossl10" # En 6.3, repose toujours sur des struct devenues private en OpenSSL 1.1.
prerequisOpenssl

prerequis

# Modifications

fbsdSansAucunGL()
{
	# Il y a des définitions pour Linux, Mac, Windows, mais pas FreeBSD en étêté.
	[ ! -f workdir/UnpackedTarball/epoxy/src/dispatch_common.h ] || \
	filtrer workdir/UnpackedTarball/epoxy/src/dispatch_common.h sed -e '/__APPLE__/{
i\
#elif defined(__FreeBSD__)
i\
#define PLATFORM_HAS_EGL 0
i\
#define PLATFORM_HAS_GLX 0
i\
#define PLATFORM_HAS_WGL 0
}'
}

selectionhandlers()
{
	# Une jolie directive dit "si Linux ou *BSD ou Darwin installer ce bidule", sauf qu'il n'existe pas. Sans doute du fait de notre DISABLE_GUI.
	filtrer Repository.mk grep -v libreofficekit_selectionhandles
}

lepoxy()
{
	# On s'embête à trouver (configure) des EPOXY_LIBS, à définir une macro (RepositoryExternal.mk) pour l'intégrer, à appeler cette macro depuis une super-macro, sauf qu'au moment d'appeler la super-macro, on oublie de mentionner qu'il faut appeler la macro epoxy.
	# Bon, c'est parce qu'epoxy n'est chargé que si DISABLE_GUI est vide. N'empêche, moi j'ai bien des machins qui sont inclus dans libvcllo.so, qui appellent du code epoxy. Donc il y a peut-être quelque chose à aller corriger de ce côté.
	# Mais pour le moment, puisque j'ai réussi à compiler un epoxy, autant s'y lier.
	filtrer vcl/Library_vcl.mk awk '
dedans&&/epoxy/{dedans=2}
dedans&&/endif/{if(dedans>1)print"else\n"mem;dedans=0}
dedans{mem=mem"\n"$0}
/ifeq.*DISABLE_GUI/{dedans=1;mem=""}
{print}'
}

inclusionsNssLocales()
{
	# Ah cette manie de s'installer à la racine des include! Forçons un préfixe propre à NSS (de toute façon notre install est ainsi faite).
	inclusionsNss */source/crypto */source/xmlsec/nss
}

opensslOuNss()
{
	# À certains endroits, on a bien du #if USE_TLS_OPENSSL #elif USE_TLS_NSS; mais à d'autres, ça ne le dérange pas d'inclure les deux d'affilée (deux #if). Or les deux implémentations semblent légèrement incompatibles.
	filtrer oox/source/crypto/CryptTools.cxx awk 'accu&&/^[ 	]*$/{accu=accu"\n"$0;next}accu&&/#if USE_TLS_NSS/{print"#elif USE_TLS_NSS";accu="";next}accu{print accu;accu=""}/^#endif/{accu=$0;next}{print}'
}

tribool()
{
	# https://svnweb.freebsd.org/ports/head/multimedia/mkvtoolnix/files/patch-boost-1.69?view=markup&pathrev=482787
	# http://www.slackware.com/~alien/slackbuilds/libreoffice/build/patches/libreoffice.boost_1.69.patch
	filtrer sfx2/source/appl/shutdownicon.cxx sed -e 's/return loaded/return bool{loaded}/g'
}

pasetime()
{
	# system.hxx code en dur un #define ETIME ETIMEDOUT pour FreeBSD. Sauf que si on a recompilé un clang récent, il définit un ETIME distinct d'ETIMEDOUT. Redéfinir à ETIMEDOUT fait péter uunxapi.cxx, dans lequel on a un case pour chacun dans un switch.
	filtrer sal/osl/unx/system.hxx grep -v '^# *define  *ETIME '
}

pthread_np()
{
	filtrer sal/osl/unx/thread.cxx awk '!fait&&/typedef/{print"#ifdef __FreeBSD_kernel__\n#include <pthread_np.h>\n#define pthread_setname_np pthread_set_name_np\n#endif";fait=1}{print}'
}

prioPasConst()
{
	filtrer sal/osl/unx/thread.cxx sed -e 's/int const m_/int m_/'
	filtrer sal/osl/unx/thread.cxx sed -e '/const.*m_priority/s/ const / /g'
}

sysmacros()
{
	case `uname` in
		Linux) true ;;
		*) filtrer desktop/unx/source/pagein.c grep -v sysmacros.h ;;
	esac
}

libtoolAdaptatif()
{
return 0
	vraiChemin="`echo "$PATH" | sed -e 's#[^:]*/localbin:##g'`"
	vraiBinaire="`PATH="$vraiChemin" ; command -v cmake`"
	mkdir -p localbin
	cat > localbin/libtoolize <<TERMINE
#!/bin/sh
SCRIPTS="$SCRIPTS"
. "\$SCRIPTS/util.sh"
echo "===========" >> /tmp/h
pwd >> /tmp/h
echo "\$# params" >> /tmp/h
for param in "\$@" ; do printf "\\"%s\\" " "\$param" ; done >> /tmp/h
echo >> /tmp/h
env >> /tmp/h
set -x
exec >> /tmp/h 2>&1
exit 1
"$vraiBinaire" "\$@"
TERMINE
	chmod a+x localbin/libtoolize
	PATH="`pwd`/localbin:$PATH"
	export PATH
}

creerDestBinSoffice()
{
	# Création du lanceur, qui inclura dans son LD_LIBRARY_PATH l'ext défini un peu plus loin (biblios rapatriées).
	
	# Cf. envpourri().
	envpourri=
	if [ `uname` = FreeBSD ] && ! pge `uname -r | sed -e 's/[^0-9.].*//'` 11 ; then
		envpourri='derniereEnv="`env | tail -1`" ; unset "`echo "$derniereEnv" | cut -d = -f 1`" ; export "$derniereEnv"'
	fi
	mkdir -p dest/bin
	cat > dest/bin/soffice <<TERMINE
#!/bin/sh

SCRIPTS="\`command -v "\$0"\`" ; [ -x "\$SCRIPTS" -o ! -x "\$0" ] || SCRIPTS="\$0" ; case "\`basename "\$SCRIPTS"\`" in *.*) true ;; *sh) SCRIPTS="\$1" ;; esac ; case "\$SCRIPTS" in /*) ;; *) SCRIPTS="\`pwd\`/\$SCRIPTS" ;; esac ; delie() { while [ -h "\$SCRIPTS" ] ; do SCRIPTS2="\`readlink "\$SCRIPTS"\`" ; case "\$SCRIPTS2" in /*) SCRIPTS="\$SCRIPTS2" ;; *) SCRIPTS="\`dirname "\$SCRIPTS"\`/\$SCRIPTS2" ;; esac ; done ; } ; delie ; SCRIPTS="\`dirname "\$SCRIPTS"\`" ; delie

PATH="\$SCRIPTS/../lib/libreoffice/program:\$PATH"
LD_LIBRARY_PATH="\$SCRIPTS/../lib/libreoffice/ext:$INSTALLS/lib:\$LD_LIBRARY_PATH"

$envpourri

soffice.bin "\$@" 2>&1 | grep -v '^> uno exception occurred: com.sun.star.ucb.InteractiveAugmentedIOException$' # L'activation des traces un peu plus haut lance ce genre de trucs qui n'apporte rien mais pollue beaucoup.
TERMINE
	chmod a+x dest/bin/soffice
	
	# On rapatrie les biblios, histoire de pouvoir créer un paquet "tout compris" à partir du simple $dest.
	
	mkdir -p dest/lib/libreoffice/ext/
	IFS=:
	for biblio in \
		libboost_system \
		libssl3 \
		libsmime3 \
		libnss3 \
		libnssutil3 \
		libplds4 \
		libplc4 \
		libnspr4 \
		liblcms2 \
		libcairo \
		libOSMesa \
		libGLEW \
		libboost_iostreams \
		libboost_filesystem \
		libpixman-1 \
		libglapi \
		libclucene-contribs-lib \
		libjpeg \
		libgraphite2 \
		libharfbuzz \
		libharfbuzz-icu
	do
		for chemin in $LD_LIBRARY_PATH ; do
			if [ -e "$chemin/$biblio.so" ] ; then
				cp "$chemin/$biblio.so"* dest/lib/libreoffice/ext/
				break
			fi
		done
	done
	unset IFS
}

envpourri()
{
	if [ `uname` != FreeBSD ] || pge `uname -r | sed -e 's/[^0-9.].*//'` 11
	then
		return 0
	fi
	
	# Un très étrange problème de corruption d'environnement sous FreeBSD (10): une commande, lancée avec un environnement pas si énorme (un poi plus de 32 Ko), explose en "environment corrupt; missing value for xxxxx', xxxxx représentant le début arbitraire de la dernière variable mentionnée par un env (ex. d'un cas: l'env se terminait par "GIT_SSL_CAINFO=/home/bas/.curl-ca-bundle.crt", la commande suivante (gengal.bin en l'occurrence) péta, de façon absolument reproductible), avec le "missing value for GIT_SSL_xx", les xx étant les deux octets 0x8102). On efface donc cette variable de l'environnement… et on la remet, et ça marche.
	if true
	then
		# Bon c'est peut-être aussi qu'on lui met 0 image dans sa galerie. Court-circuitons.
		filtrer solenv/gbuild/Gallery.mk sed -e '/call gb_Executable_get_command/i\
		true || \\
'
	else
	filtrer solenv/gbuild/Gallery.mk sed -e '/call gb_Executable_get_command/{
i\
		varpourrie=`env | tail -1` && \\
i\
		unset `echo $$varpourrie | cut -d = -f 1` && \\
i\
		export "$$varpourrie" && \\
}'
	fi
}

boostMentionne()
{
	filtrer configure sed -e 's#\$ac_boost_paths#'"$destboost#g"
}

pythonPatate()
{
	# Ces gros malins de Python croient intelligents de #define isupper et autres fonctions, soi disant parce que FreeBSD en fait trop et donc pour être conservateurs ils préfèrent la rediriger vers to iswupper. Sauf que du coup ça explose std::, qui définit des std::isupper surchargés par le #define.
	for fichier in pyuno/inc/pyuno.hxx pyuno/source/module/pyuno_impl.hxx ; do
		filtrer "$fichier" sed -e '/include *<Python.h>/{
a\
#undef toupper
a\
#undef tolower
a\
#undef isspace
a\
#undef isupper
a\
#undef islower
a\
#undef isalpha
a\
#undef isalnum
}'
	done
}

cluceneFbsd()
{
	filtrer external/clucene/patches/clucene-libcpp.patch sed -e '/^+#ifdef/s/$/)/' -e '/^+#ifdef */s//+#if defined(/' -e 's/_LIBCPP_VERSION).*/_LIBCPP_VERSION) || 1/'
}

sansTestServices()
{
	# Petits soucis divers, souvent de chargement de biblios, parfois d'autres choses (ftime surchargé, tests de largeur différant de quelques pixels, etc.), en tout cas les tests nous embêtent: on déporte tout sur les "slowcheck", qui, suppose-t-on, ne sont pas tentés (et donc plantés) par défaut dans le make all.
	filtrer solenv/gbuild/Module.mk awk '/endef/{suppr=0}{if(!suppr)print}/^define .*check_target/{suppr=1}'
	return
	filtrer solenv/gbuild/Module.mk sed -e 's/call gb_Module_add_check_target/call gb_Module_add_slowcheck_target/g'
	return
	# Petit problème, sans doute de chargement de biblios, mais va savoir quoi chercher.
	# https://lists.freebsd.org/pipermail/freebsd-office/2015-October/003004.html
	patch -p0 -l <<TERMINE
--- postprocess/Module_postprocess.mk
+++ postprocess/Module_postprocess.mk
@@ -28,5 +28,2 @@
 
-\$(eval \$(call gb_Module_add_check_targets,postprocess,\\
-       CppunitTest_services \\
-))
 
TERMINE
	# Quelques tests qui marchent presque tous, mais certains voient des différences de quelques pixels entre valeur attendue et obtenue. Tant pis pour eux, je ne suis pas à ça près.
	for module in sc sccomp ; do
		filtrer $module/Module_$module.mk sed -e 's/gb_Module_add_check_targets/gb_Module_add_slowcheck_targets/g'
	done
}

eteteComplet()
{
	# Apparemment un endroit qui avait été oublié des HEADLESS. On a recopié ce qui avait été fait un peu partout ailleurs. Sera vraisemblablement corrigé dans de futures versions.
	patch -p0 < "$SCRIPTS/libreoffice.testdesktop.patch"
	
	filtrer libreofficekit/Module_libreofficekit.mk sed -e '/ifeq.*OS/c\
ifeq (0, 1)
'
	
	filtrer vcl/source/gdi/salgdilayout.cxx sed -e 's/HAVE_FEATURE_OPENGL/1/g'
	filtrer vcl/source/opengl/OpenGLHelper.cxx sed -e 's/defined[ (]*\(SAL_\)*UNX[ )]*/0 /g'
	filtrer vcl/Library_vcl.mk sed -e '/vcl\/headless\/headlessinst/{
a\
    vcl/source/opengl/OpenGLContext \\
a\
    vcl/source/opengl/OpenGLHelper \\
a\
    vcl/opengl/FixedTextureAtlas \\
a\
    vcl/opengl/LineRenderUtils \\
a\
	vcl/opengl/RenderList \\
a\
	vcl/opengl/framebuffer \\
a\
	vcl/opengl/gdiimpl \\
a\
	vcl/opengl/program \\
a\
	vcl/opengl/salbmp \\
a\
	vcl/opengl/scale \\
a\
	vcl/opengl/texture \\
}'
	# En 6: OpenGLWrapper.hxx a bien un #ifdef LIBO_HEADLESS (si oui, isVCLOpenGLEnabled est définie en inline, et getBufferSwapCounter n'est pas déclarée), mais l'implémentation dans OpenGLContext.cxx n'en tient pas compte.
	filtrer vcl/source/opengl/OpenGLContext.cxx awk '/getBufferSwapCounter/{print "#ifndef LIBO_HEADLESS";dedans=1}{print}dedans&&/^}/{print "#endif";dedans=0}'
	filtrer vcl/source/opengl/OpenGLHelper.cxx awk '/^bool .*::isVCLOpenGLEnabled/{print "#ifndef LIBO_HEADLESS";dedans=1}{print}dedans&&/^}/{print "#endif";dedans=0}'
}

mesa()
{
	# harfbuzz pour un hb_icu_script_to_script utilisé dans vcl.
	filtrer vcl/Library_vcl.mk sed -e 's#-lGL#-lOSMesa -lGLEW -lharfbuzz-icu#g' -e 's#-lX11##g' -e 's#-lXext##g'
}

enTetesNss()
{
	preCFlag "-I$destnss/include/nss"
}

cheminOpenssl()
{
	# LibreOffice, et ses composants, ont une fâcheuse tendance à inclure <nss.h> au lieu de <nss/nss.h>, idem pour OpenSSL.
	# On doit donc ajouter explicitement les sous-dossiers nss et openssl.
	# De plus la chose se complique pour cms.h, que les deux fournissent; LibreOffice semblant privilégier NSS, il nous faut tomber sur le cms.h de NSS avant celui d'OpenSSL.
	preCFlag "-I$destnss/include/nss" "-I$destopenssl/include/openssl"
}

vraiSh()
{
	filtrer configure sed -e 's#\${PRODUCTNAME// /}#`echo "$PRODUCTNAME" | tr -d " "`#'
}

enTetesPoppler()
{
	# On a besoin des en-têtes *de compilation* de Poppler.
	INSTALLSTEMP=$TMP/poppler-temp
	(
		INSTALLS=$INSTALLSTEMP
		SANSSU=1
		export INSTALLS SANSSU
		[ -d $TMP/poppler-0.22.5 ] || rm -Rf $INSTALLSTEMP/poppler-0.22.5 # Si le répertoire de compilation n'existe pas, on détruit l'éventuelle installation (car inclure ne recompile pas si le logiciel est installé).
		inclure poppler 0.22.5
	)
	( cd $TMP/poppler-0.22.5/poppler && tar cf - *.h goo/*.h  ) | ( cd sdext/source/pdfimport/xpdfwrapper/ && tar xf - )
}

log10()
{
	filtrer sal/osl/unx/system.cxx sed -e '/unistd/a\
#include <math.h>
'
}

sansMenageExceptions()
{
	# Le ménage d'exceptions fait une manip bizarre avec l'exception (du genre un -- sur son pointeur), et se vautre ensuite. On désactive, et on remplace par l'affichage de l'exception à sa levée.
	filtrer bridges/source/cpp_uno/gcc3_linux_x86-64/except.cxx awk '{print}prochain&&/{/{prochain=0;print "return;"}/void.*deleteException/{prochain=1}'
	filtrer bridges/source/cpp_uno/gcc3_linux_x86-64/except.cxx awk 'prochain&&/#if.*OSL_DEBUG_LEVEL/{prochain=0;$0="#if 1"}{print}/void.*raiseException/{prochain=1}'
}

sansMenageOpenSsl()
{
	# Pétage dans EVP_MD_CTX_destroy. Pourtant deux printf montrent que le pointeur que l'on supprime a été alloué comme il se doit auparavant, et la pile, qui montre que c'est deux niveaux en dessous de l'EVP_MD_CTX_destroy que ça pète, laisse penser qu'il n'y a pas eu corruption de mémoire.
	# Mais comme on ne prépare notre LibreOffice que pour faire de la conversion en PDF, on se fiche qu'il y ait des fuites mémoire => on désactive le ménage.
	filtrer comphelper/source/misc/hash.cxx sed -e '/EVP_MD_CTX_destroy/s/^/if(0) /'
}

# Variables

vmin="`echo "$version" | cut -d . -f 1-3`"
archive="http://download.documentfoundation.org/libreoffice/src/$vmin/libreoffice-$version.tar.xz"

destiner

if true ; then
	if [ -z "$continuer" ] ; then
obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done
	else
		cd $TMP/libreoffice-$version
		for modif in true $modifsDyn ; do $modif ; done
fi

echo Configuration… >&2
if false ; then
./configure --prefix="$dest" \
	--with-system-libs --with-system-headers \
	--without-system-clucene --without-system-librevenge --without-system-libebook --without-system-libetonyek --without-system-libfreehand --without-system-libodfgen --without-system-libcdr --without-system-libmspub --without-system-libmwaw --without-system-libpagemaker --without-system-libvisio --without-system-libcmis --without-system-libwpd --without-system-lcms2 --without-system-libabw --without-system-libwps --without-system-libwpg --without-system-cppunit --without-system-mdds --without-system-glew --without-system-glm --without-system-graphite --without-system-orcus --without-system-redland --without-system-libexttextcat --without-system-vigra --without-system-odbc --without-system-nss --without-system-nspr --without-system-npapi-headers --without-system-sane --without-system-hunspell --without-system-altlinuxhyph --without-system-mythes --without-system-lpsolve --without-system-coinmp --without-system-liblangtag --without-system-mesa-headers \
	--disable-dependency-tracking \
	--enable-python=system \
	--with-theme=no --without-java --disable-cups --disable-gconf --disable-lockdown --disable-lotuswordpro --disable-firebird-sdbc --disable-liblangtag --disable-gltf --disable-collada --disable-scripting-beanshell --without-helppack-integration --without-system-jars --without-system-dicts \
	--disable-gui --without-doxygen --without-system-libstaroffice --without-system-libxslt # 5.3
	#--without-x # Jusqu'à 5.0
else
# On fait du with-system sur tous les paquets qui, téléchargés par LibreOffice, ne compilent pas: notre version à la mimine est vraisemblablement passée.
# postgresql: parce que celui embarqué cherche à se lier à openldap, qu'il vient de compiler en embarqué aussi, sauf qu'apparemment il n'arrive pas à détecter ledit openldap lorsqu'il est compilé "à côté".
# coinmp: parce que le paquet que tente de télécharger libreoffice finit vide.
# neon: problème de compilation: la compil dans le cadre de libreoffice passe par un "#define GMTOFF(t) (-timezone + ((t).tm_isdst > 0 ? 3600 : 0))", sauf que sous FreeBSD timezone est une fonction.
# clucene: les contribs-lib ne sont pas prises en compte dans celui à la sauce libreoffice.
# epoxy, mariadb, poppler, xmlsec, harfbuzz, graphite: en 6
# pdfium: en 6, mais ne compile pas
pge 0 $version || plus OPTIONS_CONF --with-system-nspr --with-system-glew --disable-gconf --disable-lockdown --disable-gltf --disable-collada
pge 6 $version || moins OPTIONS_CONF --with-system-nspr --with-system-glew --disable-gconf --disable-lockdown --disable-gltf --disable-collada
pge 6 $version || plus OPTIONS_CONF --with-system-epoxy --with-system-mariadb --with-system-poppler --with-system-xmlsec --with-system-graphite --with-system-harfbuzz --disable-pdfium

#plus OPTIONS_CONF --enable-debug
# Une autre façon pour déboguer est de remplacer dans tous les Makefile* ou *.mk les -O3 par des -g, make, et gdb / lldb.

./configure --prefix="$dest" \
	--with-tls=openssl \
	--without-system-libs \
	--without-system-libxml \
	--with-system-boost \
	--with-system-openssl \
	--with-system-nss \
	--with-system-curl \
	--with-system-jpeg \
	--with-system-lcms2 \
	--with-system-cairo \
	--with-system-postgresql \
	--with-system-coinmp \
	--with-system-neon \
	--with-system-clucene \
	--disable-dependency-tracking \
	--enable-python=system \
	--disable-gui --with-theme=no \
	--without-java \
	--disable-cups \
	--disable-lotuswordpro \
	--disable-firebird-sdbc \
	--disable-scripting-beanshell \
	--without-helppack-integration \
	--without-system-jars \
	--without-system-dicts \
	--without-doxygen \
	$OPTIONS_CONF
	#--without-system-liblangtag \
	#--disable-liblangtag \
fi
else
	cd $TMP/libreoffice-$version
	#for modif in true $modifs ; do $modif ; done
	bash
fi

echo Compilation… >&2
# Premières passes pour faire télécharger des paquets externes, les corriger, et relancer en espérant que notre correction ne sera pas réécrasée.
if ! make -j 4
then
	for modif in true $modifsPostTel ; do $modif ; done
	make
fi

echo Installation… >&2
# Apparemment la compil en headless oublie de produire trois fichiers, en tout cas oublie de prévenir l'installeur qu'ils ne sont pas utiles en étêté.
touch instdir/program/ui-previewer instdir/program/libchartopengllo.so workdir/Package/chart2_opengl_shader.filelist
creerDestBinSoffice
sudo make install
sudo cp -R dest/. "$dest/."

sutiliser

cd "$TMP/$$" # Pour éviter que le ménage de notre dossier de compilation se fasse: on pourrait vouloir revenir dessus, car sur un logiciel d'une telle complexité, une compil réussie ne veut pas dire que le résultat est bon du premier coup.
