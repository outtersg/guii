#!/bin/sh
# Copyright (c) 2006 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

absolutiseScripts() { SCRIPTS="$1" ; echo "$SCRIPTS" | grep -q ^/ || SCRIPTS="`dirname "$2"`/$SCRIPTS" ; } ; absolutiseScripts "`command -v "$0"`" "`pwd`/." ; while [ -h "$SCRIPTS" ] ; do absolutiseScripts "`readlink "$SCRIPTS"`" "$SCRIPTS" ; done ; SCRIPTS="`dirname "$SCRIPTS"`"
. "$SCRIPTS/util.sh"

logiciel=gcc

# Si on a déjà une version système qui convient, pas la peine de compiler.

vsysteme="`command -v gcc > /dev/null && gcc -v 2>&1 | grep 'gcc version' | sed -e 's/.*gcc version //' -e 's/ .*//'`" || true
[ ! -z "$vsysteme" ] && testerVersion $vsysteme $argVersion && exit 0 || true

# Historique des versions gérées

v 4.2.4 || true
v 4.3.6 || true
v 4.4.7 || true
v 4.5.4 || true
v 4.7.4 && prerequis="gcc >= 4.2 < $version gmp >= 4.2 < 6 mpfr >= 2.4.0 mpc >= 0.8.0" || true
v 4.8.3 && prerequis="gcc >= 4.2 < $version gmp >= 4.2 < 6 mpfr >= 2.4.0 mpc >= 0.8.0" || true
#v 4.9.2 && prerequis="gcc >= 4.2 < $version gmp >= 4.2 < 6 mpfr >= 2.4.0 mpc >= 0.8.0" || true
v 4.9.2 && prerequis="gmp >= 4.2 < 6 mpfr >= 2.4.0 mpc >= 0.8.0" && modifs="usrInclude sansCore lambdaObjC sansCollate fbsdbinutils" || true
v 4.9.4 || true

[ -z "$version" ] && echo "# Aucune règle pour compiler $logiciel $argVersion" >&2 && exit 1 || true
prerequis

# Modifications

fbsdbinutils()
{
	[ `uname` = FreeBSD ] || return 0
	echo "# Attention, si vous avez installé les binutils, la compil risque de se vautrer, perdue entre le ld binutils et celui FreeBSD." >&2
}

sansCollate()
{
	# https://www.mail-archive.com/freebsd-ports@freebsd.org/msg66728.html
	LC_COLLATE=C LC_ALL=C LANG=C
	export LC_COLLATE LC_ALL LANG
}

sansCore()
{
	filtrer libsanitizer/asan/asan_malloc_mac.cc sed -e '/include.*CFBase/s#^#//#'
}

usrInclude()
{
	if ! [ -d /usr/include ]
	then
		echo "# /usr/include n'existe pas. Sous Mac OS X, tentez un truc du genre: sudo ln -s /Developer/SDKs/MacOSX10.6.sdk/usr/include /usr/include" >&2
		exit 1
	fi
}

logarithme()
{
	# Pour historique (à ne pas utiliser). Je croyais initialement qu'il s'agissait d'un problème GCC. En fait une incompat entre MPFR (en biblio partagée) et FBSD 8.2. Cf. l'install mpfr.
	# https://gcc.gnu.org/bugzilla/show_bug.cgi?format=multiple&id=55997
	filtrer libstdc++-v3/include/bits/random.tcc sed -e 's/std::log(2.0L)/0.693147/'
}

# Notons que sur une install très locale (/home/xxx/local), il a fallu ajouter au Makefile racine les LDFLAGS à la variable POSTSTAGE1_LDFLAGS. Sinon il ne trouvait pas les libmpc et consortes (dépendances externes gcc).
# Peut-être rajouter au configure un --with-boot-ldflags="-static-libstdc++ -static-libgcc $LDFLAGS"

lambdaObjC()
{
	# https://github.com/gcc-mirror/gcc/commit/96d7f12983e561307f222a6d75627a3d7298ab35.diff
	# On retire de ce diff la partie ChangeLog, qui plante (s'applique à une version Git différente de la jolie archive).
	patch -p1 <<TERMINE
diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index 2af1576..68940aa 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -4442,10 +4442,17 @@ cp_parser_primary_expression (cp_parser *parser,
       }
 
     case CPP_OPEN_SQUARE:
-      if (c_dialect_objc ())
-        /* We have an Objective-C++ message. */
-        return cp_parser_objc_expression (parser);
       {
+	if (c_dialect_objc ())
+	  {
+	    /* We might have an Objective-C++ message. */
+	    cp_parser_parse_tentatively (parser);
+	    tree msg = cp_parser_objc_message_expression (parser);
+	    /* If that works out, we're done ... */
+	    if (cp_parser_parse_definitely (parser))
+	      return msg;
+	    /* ... else, fall though to see if it's a lambda.  */
+	  }
 	tree lam = cp_parser_lambda_expression (parser);
 	/* Don't warn about a failed tentative parse.  */
 	if (cp_parser_error_occurred (parser))
@@ -25657,14 +25664,20 @@ cp_parser_objc_message_receiver (cp_parser* parser)
   cp_parser_parse_tentatively (parser);
   rcv = cp_parser_expression (parser);
 
+  /* If that worked out, fine.  */
   if (cp_parser_parse_definitely (parser))
     return rcv;
 
+  cp_parser_parse_tentatively (parser);
   rcv = cp_parser_simple_type_specifier (parser,
 					 /*decl_specs=*/NULL,
 					 CP_PARSER_FLAGS_NONE);
 
-  return objc_get_class_reference (rcv);
+  if (cp_parser_parse_definitely (parser))
+    return objc_get_class_reference (rcv);
+  
+  cp_parser_error (parser, "objective-c++ message receiver expected");
+  return error_mark_node;
 }
 
 /* Parse the arguments and selectors comprising an Objective-C message.
diff --git a/gcc/testsuite/obj-c++.dg/lambda-0.mm b/gcc/testsuite/obj-c++.dg/lambda-0.mm
new file mode 100644
index 0000000..41482fd
--- /dev/null
+++ b/gcc/testsuite/obj-c++.dg/lambda-0.mm
@@ -0,0 +1,22 @@
+// Contributed by Iain Sandoe <iain@codesourcery.com>, December 2014.  */
+// { dg-do compile }
+// { dg-options "-std=c++11" }
+
+
+template<class Function>
+Function thing(Function fn, int a)
+{
+  fn(a);
+  return fn;
+}
+
+int
+test (int *arr, unsigned n)
+{
+  int total = 0;
+  for (unsigned i=0; i<n; i++) {
+    int a = arr[i];
+    thing ([&total] (int a) { total += a; }, a);
+  }
+  return total;
+}
diff --git a/gcc/testsuite/obj-c++.dg/lambda-1.mm b/gcc/testsuite/obj-c++.dg/lambda-1.mm
new file mode 100644
index 0000000..050d68d
--- /dev/null
+++ b/gcc/testsuite/obj-c++.dg/lambda-1.mm
@@ -0,0 +1,13 @@
+// Contributed by Iain Sandoe <iain@codesourcery.com>, December 2014.  */
+// { dg-do compile }
+// { dg-options "-std=c++11" }
+
+extern "C" {
+  int printf (const char *,...);
+}
+
+int main () 
+{
+  auto f = [] (const char *msg) -> int { printf("%s", msg); return 0; };
+  return f("Some test\n");
+}
diff --git a/gcc/testsuite/obj-c++.dg/syntax-error-6.mm b/gcc/testsuite/obj-c++.dg/syntax-error-6.mm
index 21423ec..36a444f 100644
--- a/gcc/testsuite/obj-c++.dg/syntax-error-6.mm
+++ b/gcc/testsuite/obj-c++.dg/syntax-error-6.mm
@@ -8,5 +8,8 @@ void FOO()
 {
   NSButton * mCopyAcrobatCB; 
 	
-  [ [ mCopyAcrobatCB state ] == 0 ] != 1;  /* { dg-error "objective\\-c\\+\\+" } */
+  [ [ mCopyAcrobatCB state ] == 0 ] != 1;  /* { dg-error "expected identifier before ... token" } */
+/* { dg-error "expected \\\'\\\{\\\' before \\\'!=\\\' token" "" { target *-*-* } 11 } */
+/* { dg-error "lambda expressions only available with" "" { target *-*-* } 11 } */
+/* { dg-error "no match for \\\'operator!=\\\' in" "" { target *-*-* } 11 } */
 }
TERMINE
}

# Variables

archive="http://mirror.bbln.org/gcc/releases/gcc-$version/gcc-$version.tar.bz2"
archive="ftp://ftp.uvsq.fr/pub/gcc/releases/gcc-$version/gcc-$version.tar.bz2"
dest=$INSTALLS/$logiciel-$version

[ -d "$dest" ] && exit 0

if false ; then
	cd /tmp/gcc-$version
	LC_COLLATE=C LC_ALL=C LANG=C
	export LC_COLLATE LC_ALL LANG
	echo "VOUS ENTREZ DANS BASH. AMUSEZ-VOUS"
	bash
else

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
./configure --prefix="$dest" --enable-languages=c,c++,objc,obj-c++ # fortran me plante à la gueule sur FreeBSD, en 4.7 et en 4.9 (Segmentation fault quand le gfortran intermédiaire est appelé dans un configure intermédiaire), donc merde pour Fortran. À voir si ça n'est pas résolu avec mpfr en disable-shared, mais de toute façon on s'en fout de Fortran.

fi

echo Compilation… >&2
make -j 4

echo Installation… >&2
sudo make install

sutiliser "$logiciel-$version"

rm -Rf "$TMP/$$"
