#!/bin/sh
# Copyright (c) 2006 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Historique des versions gérées

v 10.5.2 && prerequis="" && modifs="choixSortie log2" || true
v 17.0.1 && prerequis="pthreadstubs" && modifs="choixSortie log2" || true
v 18.3.5 && modifs="choixSortie elf_nhdr" || true
v 22.2.3 && prerequis="$prerequis glslang expat zstd libdrm" && modifs="$modifs sansIntel sansRtti wsiBsd" || true

# Bien que llvm fasse en théorie partie des prérequis, sur les machines sur lesquelles j'ai compilé un clang-13 et où reste encore un vieux llvm-7,
# il ne faut SURTOUT PAS ajouter llvm aux prérequis, sans quoi c'est le 7 qui sera embarqué (et qui plantera, cf. https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/15724).
# Il faudrait donc que clang sache s'installer avec pour alias llvm+clang-13.0.0
# En attendant, sur nos machines FreeBSD, étant donné que clang est le compilo choisi par défaut, il est embarqué; resterait à le faire proprement sous Linux.

if pge $version 20 # Version exacte à retrouver.
then
	parmeson=1
	prerequis="python meson ninja mako pkgconfig \\ $prerequis"
fi

# Modifications

wsiBsd()
{
	# https://cgit.freebsd.org/ports/commit/?id=23e4dce35c4a5666968d40a38ef569a210a7bede Super intéressant: toutes les bidouilles pour compiler sous FreeBSD.
	# https://lists.freebsd.org/pipermail/freebsd-x11/2020-April/025698.html
	# https://gitlab.freedesktop.org/mesa/mesa/-/issues/6653 Indique que c'est depuis la 22.2.
	
	patch -p0 <<TERMINE
--- src/vulkan/wsi/wsi_common_drm.c.orig	22.1-branchpoint-2850-gcbcdcc412c9
+++ src/vulkan/wsi/wsi_common_drm.c
@@ -33,13 +33,20 @@
 #include "drm-uapi/drm_fourcc.h"
 
 #include <errno.h>
-#include <linux/dma-buf.h>
-#include <linux/sync_file.h>
 #include <time.h>
 #include <unistd.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <xf86drm.h>
+
+#if __has_include(<linux/dma-buf.h>)
+#include <linux/dma-buf.h>
+#else
+#define DMA_BUF_SYNC_READ      (1 << 0)
+#define DMA_BUF_SYNC_WRITE     (2 << 0)
+#define DMA_BUF_SYNC_RW        (DMA_BUF_SYNC_READ | DMA_BUF_SYNC_WRITE)
+#define DMA_BUF_BASE		'b'
+#endif
 
 struct dma_buf_export_sync_file_wsi {
 __u32 flags;
TERMINE
}

sansRtti()
{
	# Il nous le demande explicitement quand notre llvm GuiLI est livré sans RTTI.
	optionsConf="$optionsConf --no-cpp_rtti"
}

sansIntel()
{
	# gallium-drivers est par défaut en auto, incluant plein de pilotes dont des radeon (r300, r600, etc.), nouveau, et i915 pour ma machine en x86_64.
	# Mais plus tard, pour savoir quelles variantes de libdrm utiliser, on se fie à ce qui a été collé dans gallium-drivers.
	# Or mon libdrm a bien voulu se compiler avec les radeon, nouveau, etc., mais pas intel.
	filtrer meson.build sed -e "/^ *\\['intel'/d" -e "s/, 'i915'//g"
}

elf_nhdr()
{
	# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=225302
	if [ -f /usr/include/sys/elf_common.h ] && ! grep -q Elf_Nhdr /usr/include/sys/elf_common.h
	then
		filtrer src/util/build_id.c sed -e '/^struct build_id_note/i\
typedef Elf_Note Elf_Nhdr;
'
	fi
}

choixSortie()
{
	if [ -d /usr/include/X11 ]
	then
		optionsConf=""
	else
		optionsConf="--enable-osmesa --enable-glx=no --enable-dri=no --disable-egl --with-dri-drivers= --with-egl-platforms= --with-gallium-drivers="
		if pge $version 17 ; then
			optionsConf="$optionsConf --disable-gbm"
		fi
		if pge $version 20
		then
			optionsConf="--enable-osmesa --enable-glx=no --with-platforms="
		fi
	fi
}

ocmeson()
{
	for o in "$@"
	do
		case "$o" in
			--enable-*=no) echo "$o" | sed -e 's/--enable-/-D/' -e 's/=no$/=disabled/' ;;
			--enable-*) echo "$o" | sed -e 's/--enable-/-D/' -e 's/$/=true/' ;;
			--disable-*) echo "$o" | sed -e 's/--disable-/-D/' -e 's/$/=disabled/' ;;
			--with-*) echo "$o" | sed -e 's/--with-/-D/' ;;
			--no-*) echo "$o" | sed -e 's/--no-/-D/' -e 's/$/=false/' ;;
			*) echo "$o" ;;
		esac
	done
}

log2()
{
	# log2 est-elle déclarée?
	
	log2declaree=oui
	log2embarquee=oui
	
	cat > $TMP/$$/testl.c <<TERMINE
#include <math.h>
#ifdef TEST_EMBARQUEE
#ifdef __cplusplus
extern "C" {
#endif
double log2(double n);
#ifdef __cplusplus
};
#endif
#endif
void bah()
{
	double z = log2(3.0);
}
TERMINE
	$CXX $CFLAGS -c -o $TMP/$$/testl.o $TMP/$$/testl.c 2> /dev/null || log2declaree=non
	[ $log2declaree = oui ] || ( $CXX $CFLAGS -DTEST_EMBARQUEE=1 -c -o $TMP/$$/testl.o $TMP/$$/testl.c 2> /dev/null && nm -o $TMP/$$/testl.o | grep -q bah && ! nm -o $TMP/$$/testl.o | grep -q log2 ) || log2embarquee=non # Si ça compile, et que le fichier objet ne contient pas de référence U (unresolved) à log2, c'est que le compilo embarque une implémentation et la reverse dans les .o.
	
	if [ $log2declaree = non ]
	then
		# Bon en fait c'est le foutoir, que l'on soit en C++ ou en C ça change dans tous les sens donc tant pis on fait comme si on n'avait rien d'embarqué dans le compilo.
		log2embarquee=non
		for i in src/mesa/main/imports.h src/glsl/nir/nir_constant_expressions.c
		do
			numLigne="`grep -n '^#include' < "$i" | head -1 | cut -d : -f 1`"
			if [ $log2embarquee = oui ]
			then
				filtrer "$i" sed -e "$numLigne"'{
i\
#include <math.h>
i\
#ifdef __cplusplus
i\
extern "C" {
i\
#endif
i\
double log2(double x);
i\
float log2f(float x);
i\
#ifdef __cplusplus
i\
};
i\
#endif
}'
			else
				filtrer "$i" sed -e "$numLigne"'{
i\
#include <math.h>
i\
#define log2(x) (log10(x) / log10(2.0))
i\
#define log2f(x) ((float)log2((double)x))
}'
			fi
		done
	fi
}

# Variables

archive="ftp://ftp.freedesktop.org/pub/mesa/$version/mesa-$version.tar.xz"
archive="https://gitlab.freedesktop.org/mesa/mesa/-/archive/mesa-$version/mesa-mesa-$version.tar.bz2"

destiner

prerequis

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
if [ -n "$parmeson" ]
then
	mkdir -p build
	optionsConf="`ocmeson $optionsConf`"
	meson setup build --buildtype=release --prefix="$dest" $optionsConf
	cd build
	make=ninja
else
./configure --prefix="$dest" $optionsConf
	make=make
fi

echo Compilation… >&2
$make

echo Installation… >&2
if [ -n "$parmeson" ]
then
	sudokupy $make install
else
sudo make install
fi
sutiliser
