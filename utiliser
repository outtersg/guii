#!/bin/sh

prefixe=/usr/local

[ -z "$PREFIXE_UTILISER" ] || prefixe="$PREFIXE_UTILISER"
[ "x$1" = "x-r" ] && shift && prefixe="$1" && shift

auSecours()
{
	if [ -n "$1" ]
	then
	cat >&2 <<TERMINE
# "$1" introuvable.
TERMINE
	fi
	cat >&2 <<TERMINE
# Utiliser
# Crée récursivement des liens de $prefixe/<x>/<y> vers $prefixe/<cible>/<x>/<y>
# © Guillaume Outters 2003-2004,2007,2019-2020

Utilisation: $0 [-r <racine>] [-p <préservés>] <cible>
  -r <racine>
    Va chercher sous <racine> plutôt qu'/usr/local.
    Voir aussi la possibilité de préciser la racine dans <cible>.
  -p <préservés>
    <préservés> est une liste de noms de dossier dont préserver les liens.
    Ainsi \`utiliser -p "logiciel-2.0 logiciel-3.0" logiciel-1.0\` n'écrasera-t-il pas <racine>/bin/logiciel par ../logiciel-1.0/bin/logiciel si c'est un lien symbolique vers ../logiciel-2.0/bin/logiciel.
  <cible>
    Cible des liens symboliques, sous la forme <logiciel>(+<option>)*-<version>.
    En cas de chemin complet, son dirname est pris comme racine.

En cas de conflit sur un emplacement (quelque chose existe là où l'on voudrait créer notre lien), l'existant est préservé (on ne s'installe pas), sauf si:
- il s'agit d'un lien symbolique vers un dossier
  Auquel cas il devient un vrai dossier et on travaille les liens symboliques un niveau en-dessous (si bin est un lien symbolique vers sudo-1.x.y/bin alors qu'on a besoin de lier vers notre openssl-1.z/bin, alors bin est transformé en dossier, et des liens symboliques y sont créés bin/sudo -> ../sudo-1.x.y/bin/sudo et bin/openssl -> ../openssl-1.z/bin/openssl)
- c'est un lien symbolique vers une autre version du même logiciel (ET cette autre version ne fait pas partie des préservés)
  Ainsi ../openssl-1.0.x/bin/openssl remplacera-t-il ../openssl-0.9.y/bin/openssl, sauf si on a été appelés avec un -p openssl-0.9.y
TERMINE
	exit 1
}

allerUtiliser()
{
	local i
	local j
	local k
	# Juste le nom de l'app.
	i="`echo "$1" | sed -e 's#/.*##'`"
	cd "$prefixe/$i"
	# Le nom de tout ce qui est après l'app (avec le / reporté à la fin).
	k="`echo "$1" | sed -e 's#^[^/]*##' -e 's#$#/#' -e 's#^/##'`"
	# Les .. correspondant à tout ce qui est après l'app.
	j="`echo "$1" | sed -e 's#^[^/]*##' -e 's#/[^/]*#..@#g' -e 's#@#/#g'`"
	utiliserEtoile "$j$i" "$k"
}

# Chope le radical d'installation d'un chemin (sans ses options ni version).
# Le résultat se trouvera dans $radical.
# Ex.: ../../../apr-util-1.6.1 -> ../../../apr-util
radicaliser()
{
	IFS="-"
	_radicaliser $1
	IFS="+"
	_radicalPremier $radical
	unset IFS
}
_radicaliser()
{
	unset IFS # Pour certains Linux pourris, ( IFS=- ; case 0.20.1 in [0-9]*.[0-9]*) echo oui ;; esac ) n'affiche rien.
	local bout
	radical="$1" ; shift
	for bout in "$@"
	do
		case "$bout" in
			[0-9]*.[0-9]*) return 0 ;;
		esac
		radical="$radical-$bout" # Ex.: apr-util, l'util n'est pas un numéro de version comme dans apr-1.6.5.
	done
}
_radicalPremier()
{
	radical="$1"
}

statn()
{
	case `uname` in
		FreeBSD|Darwin) stat -f "%N" "$@" ;;
		*) stat --format="%N" "$@" ;;
	esac
}

utiliserEtoile()
{
	if statn "$2"* 2> /dev/null > /dev/null
	then
		utiliser "$1" "$2"*
	else
		utiliser "$1"
	fi
}

utiliser()
{
	local ou="$1"
	local a
	shift
	local gentillesse
	
	local radical
	radicaliser "$ou"
	
	until [ $# = 0 ]
	do
		gentillesse=1
		# On commence par virer les liens qu'une de nos précédentes versions
		# auraient placés, et pour les liens déjà utilisés par un autre
		# logiciel, on les remplace si possible par un dossier qu'on va se
		# partager.
		if [ -L "$prefixe/$1" ]
		then
			a="`readlink "$prefixe/$1"`" # Vers où ça pointe pour l'heure?
			eval \
			'
			case "$a" in
				'"$EXPR_PRESERVES"'"") gentillesse=2 ;;
				$radical[-][0-9]*.[0-9]*|$radical+*) gentillesse= ;; # Même radical, version sans doute plus ancienne à ne pas préserver, on écrase.
			esac
			'
			if [ -z "$gentillesse" ]
			then
				rm "$prefixe/$1"
			elif [ -d "$prefixe/`dirname "$1"`/$a" -a ! -L "$prefixe/`dirname "$1"`/$a" ] # La destination est un répertoire, on peut l'utiliser.
			then
				rm "$prefixe/$1"
				mkdir "$prefixe/$1"
				a="`echo "$a" | sed -e 's#\.\./##g'`"
				echo "On ménage $a…" >&2
				( allerUtiliser "$a" )
			else
				[ $gentillesse -gt 1 ] || echo "$1 déjà occupé par $a" >&2
			fi
		fi
		if [ -d "$1" -a -d "$prefixe/$1" -a ! -L "$prefixe/$1" ]
		then
			utiliserEtoile "../$ou" "$1/"
		elif [ \( ! -e "$prefixe/$1" \) ]
		then
			ln -s "$ou/$1" "$prefixe/$1"
		else
			[ $gentillesse -gt 1 ] || echo Impossible d\'écraser $1
		fi
		shift
	done
}

exprPreserves()
{
	echo "$*" | tr ' ' '\012' | grep -v ^$ | while read d ; do basename "$d" ; done | sed -e '{
s#$#/*#
p
s#^#*/#
}' | tr '\012' '|'
}

analyserParametresEtTourner()
{
	local lv
	local preserves=
	local une=
	while [ $# -gt 0 ]
do
		case "$1" in
			-p) preserves="$preserves $2" ; shift ; shift ; continue ;;
			*/*) prefixeIci="`dirname "$1"`" ; lv="`basename "$1"`" ;;
			*) prefixeIci="$prefixe" ; lv="$1" ;;
	esac
		EXPR_PRESERVES="`exprPreserves "$preserves"`"
		[ -d "$prefixeIci/$lv" ] || auSecours "$prefixeIci/$lv"
	prefixe=$prefixeIci allerUtiliser "$lv"
		shift
		une=1
	done
	[ -n "$une" ] || auSecours
}

analyserParametresEtTourner "$@"
