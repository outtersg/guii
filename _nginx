#!/bin/sh
# Copyright (c) 2006 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

DelieS() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ; case "$s" in [^/]*) s="`pwd`/$s" ;; esac ; DelieS ; s="`dirname "$s"`" ; DelieS ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Historique des versions gérées

prerequis="nginx"

auSecours()
{
	moi="`basename "$0"`"
	cat >&2 <<TERMINE
# Utilisation: $moi [-u <compte>]
TERMINE
	exit 1
}

analyserParametres()
{
	vars=""
	compteMaitre=root
	compte=
	PARAMS_SERVEUR=
	varrun=
	varlog=
	vartmp=
	while [ $# -gt 0 ] ; do
		case "$1" in
			"") true ;; # Version bidon passée par exemple par varsPrerequis.
			-r|-up) PARAMS_SERVEUR="$PARAMS_SERVEUR $1 $2" ; shift ;;
			-U) shift ; compteMaitre="$1" ; [ -z "$compte" -a "c$1" != croot ] && compte="$1" || true ;;
			-u) shift ; compte="$1" ;;
			--var-run=*) varrun="`echo "$1" | cut -d = -f 2-`" ;;
			--var-log=*) varlog="`echo "$1" | cut -d = -f 2-`" ;;
			--var-tmp=*) vartmp="`echo "$1" | cut -d = -f 2-`" ;;
			--alias) shift ; true ;;
			*) apAffecter "$1" $vars ;;
		esac
		shift
	done
	
	apiReporterParamsLsj

	if [ -z "$compte" ] ; then
		comptesEnvisages="nginx web www `id -un`"
		for compte in $comptesEnvisages personne ; do
			id "$compte" 2> /dev/null >&2 && break
		done
		if [ "$compte" = personne ] ; then
			echo "# Impossible de trouver un des comptes sous lequel tourner ($comptesEnvisages). Forcez un compte via -u <compte> (il sera créé si nécessaire)." >&2
			exit 1
		fi
	fi
}

liensConfIperso()
{
	local opts=
	[ "x$1" = x-0 ] && opts="-print0" && shift || true
	( cd "$iperso_cible/$conf" && find . -mindepth 1 -maxdepth 1 -type l $opts | "$@" )
}

IFS="$guili_sep"
tifs analyserParametres $guili_params_

prerequis

# Modifications

# Variables

volsj # On prend pour version et options celles de notre logiciel sous-jacent.

destiner

if ! id "$compte" > /dev/null 2>&1 ; then
	echo "Création de l'utilisateur…" >&2
	creeCompte -s /bin/sh $compte
fi

echo "Auto-démarrage…" >&2

_env()
{
	[ -n "$varrun" ] || varrun="$dest/logs"
	[ -n "$vartmp" ] || vartmp="$dest/var/tmp/nginx"
	[ -n "$varlog" ] || varlog="$dest/logs"
}

_patronTemp()
{
	local dest0="$1"
	
# Constitution.
conf="etc/nginx.original" # Doit être différent de conf (standard nginx), sans quoi nginx et _nginx se disputeront le lien symbolique $INSTALLS/conf. De plus, suffixe .original pour permettre les personnalisations.
mkdir -p "$dest0/$conf"
	( cd "$destnginx/conf" && tar cf - . ) | ( cd "$dest0/$conf" && tar xf - )
	mv "$dest0/$conf/nginx.conf" "$dest0/$conf/nginx.conf.1"
	cat > "$dest0/$conf/nginx.conf" <<TERMINE
pid $varrun/nginx.pid;
`[ "$compteMaitre" != root ] || echo "user $compte;"`
TERMINE
	cat > "$dest0/$conf/nginx.http.conf" <<TERMINE
	client_body_temp_path $vartmp/client_body_temp;
	proxy_temp_path $vartmp/proxy_temp;
	fastcgi_temp_path $vartmp/fastcgi_temp;
	uwsgi_temp_path $vartmp/uwsgi_temp;
	scgi_temp_path $vartmp/scgi_temp;
TERMINE
	cat "$dest0/$conf/nginx.conf.1" >> "$dest0/$conf/nginx.conf" && rm "$dest0/$conf/nginx.conf.1"
filtrer "$dest0/$conf/nginx.conf" awk '/^[ \t]*server/{entree=1}entree||niveau{sub(/#.*/,"");niveau=niveau+gsub(/{/,"")-gsub(/}/,"");entree="";next}{print}'
	filtrer "$dest0/$conf/nginx.conf" awk '/^http/{dedans=1}/^}/&&dedans{dedans=0;print"	include nginx.local.conf;"}/include nginx.local.conf/{next}{print}dedans==1&&/{/{dedans=2;print"	include nginx.http.conf;"}'
touch "$dest0/$conf/nginx.local.conf"
	case "$varlog" in
		$dest/*) true ;;
		/*) ln -s "$varlog" "$dest0/logs" ;; # Si les logs sont désirés ailleurs que chez nous, on crée tout de même le dossier de logs local (comme lien symbolique vers celui demandé) car nombre de fichiers de conf par défaut d'nginx codent en dur ce logs/.
	esac
	serveur_patronVars "$dest0" "$varlog" "$varrun" "$vartmp"
conf="`echo "$conf" | sed -e 's#\.original$##'`"
# Personnalisation.
iperso "$dest0"
	if [ -n "$iperso_cible" ] && liensConfIperso grep -q .
	then
		liensConfIperso -0 xargs -0 tar cf - | ( cd "$dest0/$conf" && tar xf - )
	fi
}

_pousserPatronTemp()
{
	local dest0="$1" dest="$2"
	
# Copie.
	sudoku sh -c "mkdir -p \"$dest\" && ( cd \"$dest0\" && tar cf - . ) | ( cd \"$dest\" && tar xf - )"
	serveur_chownVars
}

_env
_patronTemp "$TMP/$$/dest"
_pousserPatronTemp "$TMP/$$/dest" "$dest"

# Démarreur.
# N.B.: il est probable que le -u soit root, du fait de la nécessité d'ouvrir les ports privilégiés. Le passage en compte sous-privilégié sera à faire dans le fichier de conf (le processus maître, piloté par ce -u, sera root; les fils, pilotés par la conf, pourront être autre chose).
serveur \
	-p "$varrun/nginx.pid" \
	-u "$compteMaitre" \
	-uf "$compte" \
	$PARAMS_SERVEUR \
	demon nginx \
	-pre "umask 007" \
	extra_commands=reload \
	-e LD_LIBRARY_PATH \
	"$destnginx/sbin/nginx -p $dest -c $dest/$conf/nginx.conf"

sutiliser -
