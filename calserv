#!/bin/bash
# Copyright (c) 2004,2009 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

absolutiseScripts() { SCRIPTS="$1" ; echo "$SCRIPTS" | grep -q ^/ || SCRIPTS="`dirname "$2"`/$SCRIPTS" ; }
calcScripts() { absolutiseScripts "`command -v "$1"`" "`pwd`/." ; while [ -h "$SCRIPTS" ] ; do absolutiseScripts "`readlink "$SCRIPTS"`" "$SCRIPTS" ; done ; SCRIPTS="`dirname "$SCRIPTS"`" ; }
calcScripts "$0"
. "$SCRIPTS/util.bash"

logiciel=calserv

version=t2.4
modifs="fichierDeConf internap zopeInterfaceSansZope rsyncAbsolu rsyncVaChercherTonBin twistedEnodata setuptools caldavdplistDansEtc caldavdPythonpath installerMemcached"

version=t3.1
modifs="fichierDeConf rsyncAbsolu rsyncVaChercherTonBin twistedEnodata2 caldavdplistDansEtc caldavdPythonpath installerMemcached setPete includeLocal ldapSaslInclude"

version=t4.1
modifs="fichierDeConf rsyncAbsolu rsyncVaChercherTonBin ldapSaslInclude"
modifs="fichierDeConf rsyncAbsolu rsyncVaChercherTonBin caldavdplistDansEtc caldavdPythonpath setPete ldapSaslInclude"

# La 4.2 corrige le problème de perf du REPORT: un REPORT sur une période (mettons un mois) récupérait les événements demandés, puis faisait une récup de TOUS les événements du calendrier à fin de décoration ou je ne sais quoi (inclure le décompte n / total événements calendrier?). Résultat: 4 à 8 s à obtenir une semaine sur mon agenda comptant (sur son histoire complète) quelques milliers d'événements (cf. ~/tmp/testcal). Avec la 4.2, le résultat est quasi-instantané. Le problème ne se posait pas avec les produits Apple (qui travaillent avec une base locale qu'ils ne synchronisent avec CalDAV que via Etag/Ctag), mais avec Agendav, qui fait grand usage de REPORTs. Dès lors, pour Agendav, la majeure partie du temps est passée dans le traitement PHP et JS.
version=t4.2
modifs="fichierDeConf rsyncAbsolu rsyncVaChercherTonBin caldavdplistDansEtc caldavdPythonpath setPete ldapSaslInclude"

# Modifications

defVarInstallPython()
{
	# Python choisit d'implanter ses bazars un peu partout, en fonction de
	# machins codés en dur, mais aussi de variables de config. Ainsi, sous
	# FreeBSD, les scripts sont installés sous $prefix/bin, mais sous Mac OS X,
	# la conf par défaut redéfinit un BINDIR à /usr/local/bin (alors que le
	# $prefix va quelque part dans /System/Library/…).
	# Aussi, pour être sûrs d'aller chercher au bon endroit… ben on crée un
	# script d'install bidon, on le lance, et une fois qu'on est bien dedans, on
	# lui demande de nous sortir ce qu'il sait de son environnement.
	# Merci à http://mail.python.org/pipermail/distutils-sig/2009-September/013261.html
	cat > "$TMP/$$/bidon.py" <<TERMINE
import distutils.core as core
from distutils.command.install import install 
class bidon(install):
    def run(self):
	        print "PY_SCRIPT_DIR=%s"%(self.install_scripts)
core.setup(cmdclass={'install':bidon})
TERMINE
	eval "`python "$TMP/$$/bidon.py" install | grep =`"
}

defVarInstallPython

zopeInterfaceSansZope()
{
	# zope/interface/__init__.py est installé, mais pas zope/__init__.py, sur
	# l'hypothèse qu'on a déjà un Zope d'installé dont il ne manque que la
	# partie Interface. Manque de bol, on n'a pas Zope. Et Python refuse de
	# reconnaître le premier si le second n'est point présent. On lui dit donc
	# d'installer aussi ça.
	filtrer run sed -e '/www_get.*Zope Interface/a\
! py_have_module zope && grep -v namespace_packages < "${zope}/setup.py" > "${zope}/setup.py.temp" && cat "${zope}/setup.py.temp" > "${zope}/setup.py"
'
}

rsyncAbsolu()
{
	for f in run support/build.sh support/submit
	do
		[ -e "$f" ] && filtrer "$f" sed -e 's#\(rsync -av "\)\([^/]*\)/#\1`python -c "import os;print os.path.normpath('\'\\2\'')"`/#'
	done
}

rsyncVaChercherTonBin()
{
	# Sur Mac OS X, on ne sait pourquoi, en préparant son déploiement, il aura mis le répertoire bin sous un usr/local plutôt que sous le répertoire nommé d'après la destination réelle (où rsync va le chercher). Sous BSD il aura bien préparé son arborescence. Pour pallier, on envoie tous les fichiers au même endroit si on en trouve aux deux.
	# À FAIRE: ne marche pas encore des masses, pydir.py va de toute manière s'installer direct dans /usr/local/bin. Et est introuvable du coup pour Twisted aui a codé en dur qu'il était dans le répertoire inattendu.
	for f in run support/build.sh support/submit
	do
		[ -e "$f" ] && filtrer "$f" sed -e '/rsync.*bin/{
i\
transit_bin_inattendu="`python -c "import os;print os.path.normpath('\''${install}/usr/local'\'')"`/bin/"
i\
transit_bin_attendu="`python -c "import os;print os.path.normpath('\''${install}${py_prefix}'\'')"`/bin/"
i\
[ -d "$transit_bin_inattendu" ] && mkdir -p "$transit_bin_attendu" && cp "$transit_bin_inattendu"/* "$transit_bin_attendu/"
}'
	done
}

twistedEnodata()
{
	# Utilise une constante d'erreur non définie sous FreeBSD (donc à priori non
	# utilisée). On la vire, et on reconstitue un tableau Python valide derrière
	# ("(4)" est un scalaire, il faut "(4,)").
	filtrer run sed -e '/py_install.*Twisted/i\
sed -e "/errno.ENODATA, /s///" -e "s/= (\\\\([^,]*\\\\))/= (\\\\1,)/" < "${twisted}/twisted/web2/dav/xattrprops.py" > "${twisted}/twisted/web2/dav/xattrprops.py.temp" && cat "${twisted}/twisted/web2/dav/xattrprops.py.temp" > "${twisted}/twisted/web2/dav/xattrprops.py"
'
}

twistedEnodata2()
{
	# On essaie de remplacer ENODATA par la valeur (C) de la première chose connue et ressemblante qui compile en C. Python ne connaissant pas forcément toutes les valeurs que voit C, on va utiliser directement la valeur numérique.
	enoqqc="`for i in ENODATA ENOATTR ; do ( echo '#include <errno.h>' ; echo '#include <stdio.h>' ; echo 'int main(int argc, char ** argv) { printf("%d\n", '$i'); return 0; }' ) | cc -x c - -o /tmp/test 2> /dev/null  && /tmp/test ; done | head -1`"
	for f in nonpasrun support/build.sh support/submit
	do
		[ -e "$f" ] && filtrer "$f" sed -e '/Twisted.*;/a\
grep -rl ENODATA "${caldav}/twisted" "${caldav}/twext" "${caldav}/txdav" | while read f ; do sed -e s/errno.ENODATA/'$enoqqc'/g < $f > $f.temp && cat $f.temp > $f ; done
'
	done
}

setuptools()
{
	sudo sh "`obtenir "http://pypi.python.org/packages/$pvc/s/setuptools/setuptools-0.6c11-py$pvc.egg"`"
}

# Pas sûr qu'il faille l'appeler: le script run fait la même chose, mais applique en plus des rustines.
pydirector()
{
	(
		obtenirEtAllerDans "http://sourceforge.net/projects/pythondirector/files/pythondirector/pythondirector-1.0.0/pydirector-1.0.0.tar.gz/download" pydirector-1.0.0.tar.gz
		python setup.py build
		sudo python setup.py install
	)
}

caldavdplistDansEtc()
{
	filtrer calendarserver/tools/fixcalendardata.py sed -e "s#/etc/caldavd/caldavd.plist#$dest/etc/caldavd.plist#"
	filtrer setup.py sed -e '/caldavd.plist/s/"caldavd"/"etc"/'
	for f in run support/build.sh
	do
		[ -e "$f" ] && filtrer "$f" sed -e '/rsync/s#/caldavd/#/etc/#g'
	done
}

caldavdPythonpath()
{
	# La "Home Install" (seule qui nous permette de placer caldavd exactement où
	# nous le voulons) oublie qu'elle utilise un PYTHONPATH qui ne sera sûrement
	# pas présent en root. On le colle donc dans le script de démarrage.
	filtrer setup.py sed -e '/script.append.*PYTHONPATH/{
s#%s#%s:%s#
s#,)#,os.getenv("PYTHONPATH"))#
}'
# A FAIRE: PYTHONPATH="/usr/local/calserv-4.1/lib/python:/usr/local/python-2.7.2/lib/python2.7/site-packages::$PYTHONPATH"
}

internap()
{
	# internap ne répond plus.
	filtrer run sed -e 's/internap.dl.sourceforge.net/switch.dl.sourceforge.net/g'
}

editePlist()
{
	f="$1"
	shift
	directives=
	while [ $# -gt 1 ]
	do
		directives="$directives/<key>$1<\\/key>/{p=\"$2\"}"
		shift
		shift
	done
	filtrer "$f" awk "{if(p){gsub(/>.*</,\">\"p\"<\");gsub(/<[A-Za-z]*\/>/,\"<\"p\"/>\");p=\"\"}}$directives{print}"
}

fichierDeConf()
{
	editePlist conf/caldavd.plist \
		HTTPPort 8080 \
		ServerRoot "$db" \
		UseDatabase true \
		DataRoot "$db/data" \
		DocumentRoot "$db/docs" \
		ConfigRoot "$dest/etc" \
		RunRoot "$dest/var/run" \
		xmlFile "$dest/etc/caldavd-accounts.xml" \
		SudoersFile etc/caldavd-sudoers.plist \
		LogRoot "$dest/var/log/caldavd" \
		AccessLogFile "$dest/var/log/caldavd/access.log" \
		ErrorLogFile "$dest/var/log/caldavd/error.log" \
		GlobalStatsSocket "$dest/var/run/caldavd-stats.sock" \
     	ServerStatsFile "$dest/var/run/caldavd/stats.plist" \
     	PIDFile "$dest/var/run/caldavd.pid" \
     	UserName www \
     	GroupName www
	
	# On fonctionne à l'ancienne: un fichier par événement. Certes un jour il
	# serait bon de passer sur base de données…
	# Cf. http://trac.calendarserver.org/browser/CalendarServer/tags/release/CalendarServer-3.1/twistedcaldav/stdconfig.py
	false && \
	pge $v 3.0 && filtrer conf/caldavd.plist sed -e '/Database connection/a\
<key>UseDatabase</key> <false/>
'
	# Au chargement le serveur ne répond pas, et lance un "Message too long" dans ses traces.
	# Cf. http://trac.calendarserver.org/ticket/448
	pge $v 3.0 && filtrer conf/caldavd.plist sed -e '/Database connection/a\
<key>UseMetaFD</key> <false/>
'

	# NOTE: guid
	# Lorsque l'on précise à iCal de se connecter à principals/users/gui, il
	# l'enregistre sous son nom brut (principals/__uids__/55xxx). Problème:
	# calserv ne se crée l'association en mémoire que lorsqu'on appelle le
	# premier. Aussi au redémarrage d'iCal (ou lorsque calserv vide son cache,
	# régulièrement), iCal essaie d'accéder via /__uids__/ et se prend une 404.
	# Il faut alors réaccéder en manuel à /users/ avant qu'iCal ne retrouve son
	# petit.
	# En précisant le <guid> dans le fichier de conf, calserv n'a plus besoin de
	# le retrouver à la volée. Ici, dans un premier temps le serveur a tourné
	# sans guid, puis j'ai récupéré celui qu'il avait généré tout seul pour le
	# coller ici.
	# cf. http://old.nabble.com/Debugging-caldavd-on-Linux-td13539777.html
	adr=cuaddr && padr=mailto: && auto="<auto-schedule/>" && mlieu=proxies
	pge $v 3 && adr=email-address && padr= && auto= && mlieu=members
	cat > $TMP/$$/caldavd-accounts.xml <<TERMINE
<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) 2006-2007 Apple Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 -->

<!DOCTYPE accounts SYSTEM "accounts.dtd">

<accounts realm="Agenda de famille">
  <user>
    <uid>root</uid>
    <passwordouille>admin</password>
    <name>Rootine</name>
  </user>
  <user>
    <uid>gui</uid>
    <passwordouille>test</password>
    <name>Guillaume</name>
    <$adr>${padr}guillaume.outters@free.fr</$adr>
	<!-- Cf. note dans l'installeur. -->
	<guid>55ae0bd5-c0ce-577a-b63f-a19196aad419</guid>
  </user>
  <group>
    <uid>famille</uid>
    <passwordouille>users</password>
    <name>Famille</name>
    <members>
      <member type="users">gui</member>
    </members>
  </group>
  <location>
    <uid>maison</uid>
    <passwordouille>mercury</password>
    <name>La Villa des Étangs</name>
    $auto
    <$mlieu>
      <member type="users">gui</member>
    </$mlieu>
  </location>
</accounts>
TERMINE

	cat > $TMP/$$/caldavd-sudoers.plist <<TERMINE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>users</key>
<array>
<!-- Sudo user definitions -->
<!-- With the exception of username and password none of the following
     elements are used in the current implementation. -->
<!--
  <dict>
    <key>authorize-as</key>
    <dict>
      <key>allow</key>
      <true/>
      <key>principals</key>
      <array>
	<string>all</string>
        <string>/principals/user/wsanchez</string>
      </array>
    </dict>
    <key>authorize-from</key>
    <array>
      <string>127.0.0.1</string>
    </array>

    <key>username</key>
    <string></string>

    <key>password</key>
    <string></string>
  </dict>
-->
  <dict>
    <key>username</key>
    <string>root</string>
    <key>password</key>
    <stringouille>superuser</string>
  </dict>
</array>
</dict>
</plist>
TERMINE
	
	pypath="`python -c "import sys; print sys.prefix;"`"
	filtrer twistedcaldav/config.py sed \
		-e "s#/usr/share/caldavd/bin/twistd#$dest/bin/twistd#g" \
		-e "s#/usr/share/caldavd/bin/pydir.py#$PY_SCRIPT_DIR/pydir.py#g" \
		-e "s#/Library/CalendarServer/Data#$db/data#g" \
		-e "s#/Library/CalendarServer/Documents#$db/docs#g" \
		-e "s#/etc/caldavd/caldavd.plist#$dest/etc/caldavd.plist#g" \
		-e "s#/etc/caldavd/sudoers.plist#$dest/etc/caldavd-sudoers.plist#g" \
		-e "s#/etc/caldavd/servertoserver.xml#$dest/etc/caldavd-servertoserver.xml#g" \
		-e "s#/var/log/caldavd/access.log#$dest/var/log/caldavd/access.log#g" \
		-e "s#/var/log/caldavd/error.log#$dest/var/log/caldavd/error.log#g" \
		-e "s#/var/log/caldavd/accounting#$dest/var/log/caldavd/accounting#g" \
		-e "s#/var/run/caldavd-stats.sock#$dest/var/run/caldavd-stats.sock#g" \
		-e "s#/var/run/caldavd/stats.plist#$dest/var/run/caldavd-stats.plist#g" \
		-e "s#/var/run/caldavd.pid#$dest/var/run/caldavd.pid#g" \
		-e "s#/var/run/caldavd.sock#$dest/var/run/caldavd.sock#g"
}

installerMemcached()
{
	for f in run support/build.sh
	do
		[ -e "$f" ] && filtrer "$f" sed -e '/rsync.*install_home.*etc/{
a\
set +u
a\
shopt -s nullglob 2> /dev/null || true
a\
[ -z "$libevent" ] && for libevent in /tmp/libevent-* ; do true ; done
a\
[ -z "$memcached" ] && for memcached in /tmp/memcached-* ; do true ; done
a\
[ -z "$libevent" ] || rsync -av "$libevent/_root/" "'"$dest"'/"
a\
[ -z "$memcached" ] || rsync -av "$memcached/_root/" "'"$dest"'/"
a\
set -u
}'
	done
}

setPete()
{
	filtrer support/build.sh sed -e '1a\
set -e
'
}

includeLocal()
{
	filtrer support/build.sh sed -e "/^find_header/,/^}/s#cc #cc  -I$INSTALLS/include #"
}

ldapSaslInclude()
{
	mkdir -p lib-patches/python-ldap
	cat > lib-patches/python-ldap/recupLocal.patch <<TERMINE
--- ./setup.cfg	2012-01-11 13:14:01.000000000 +0100
+++ ./setup.cfg	2012-01-11 13:15:21.000000000 +0100
@@ -2,8 +2,8 @@
 extra_objects = 
 extra_compile_args = 
 libs = ldap_r lber sasl2 ssl crypto
-library_dirs = /usr/local/openldap-2.3/lib
-include_dirs = /usr/local/openldap-2.3/include /usr/include/sasl
+library_dirs = $INSTALLS/lib
+include_dirs = $INSTALLS/include $INSTALLS/include/sasl
 
 [egg_info]
 tag_build = 
TERMINE
}

# Variables

v="${version#t}"
dest="$INSTALLS/$logiciel-$v"
db="$HOME/var/db/caldav"
archive_svn="http://svn.macosforge.org/repository/calendarserver/CalendarServer/trunk"
archive_svn_tag="http://svn.macosforge.org/repository/calendarserver/CalendarServer/tags/release/CalendarServer-$v"
archive_svn_tag="http://svn.calendarserver.org/repository/calendarserver/CalendarServer/tags/release/CalendarServer-$v"
pvc="`python --version 2>&1 | sed -e 's/[^0-9]*\([0-9][0-9]*\.[0-9][0-9]*\).*/\1/'`" # Python version courte

[ -d "$dest" ] && exit 0

inclure kerberos # Nécessaire en 2, en 3.1, …
if pge $v 3
then
	inclure postgresql
	inclure openldap
	inclure sasl
fi

echo Obtention et décompression… >&2
obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration et compilation… >&2
./run -s

echo Installation… >&2
sudo ./run -I "$dest"

sudo mkdir -p "$dest/etc" "$dest/var/log/caldavd" "$dest/var/run" "$db/data" "$db/docs"
sudo cp $TMP/$$/caldavd-accounts.xml $TMP/$$/caldavd-sudoers.plist "$dest/etc/"
sudo chmod 700 "$dest/etc/"*
sudo chmod 775 "$dest/var/log/caldavd" # postgres a besoin de créer ses fichiers sous le UserName mentionné.
sudo chmod 775 "$dest/var/log"
sudo chown root:www "$dest/var/log/caldavd"
#touch "$dest/var/log/caldavd/postgres.log"
#chown www:wheel "$dest/var/log/caldavd/postgres.log"
sudo chown -R www:www "$db"
sudo cp contrib/tools/fix_calendar "$dest/bin/"
calcScripts python
[ -f "$SCRIPTS/pydir.py" ] || ( [ -f /usr/local/bin/pydir.py ] && sudo ln /usr/local/bin/pydir.py "$SCRIPTS/" ) || true # pydir n'est plus trop utilisé dans les nouvelles versions.

sutiliser "$logiciel-$v"

crontaber - "pg_dump.*caldav" "21-19-*-*-*" '/usr/local/bin/sudo /usr/local/bin/pg_dump -h `/usr/local/bin/sudo grep _postgres_ '"$db"'/data/Database/cluster/postmaster.pid` -U www caldav | gzip > '"$HOME"'/sauvegardes/caldav.`date +\%Y-\%m-\%d`.sql.gz'
crontaber - "purgevieilles.php.*caldav.*sql" "39-19-*-*-*" '/usr/local/bin/php /home/gui/src/scripts/sauvegarde/purgevieilles.php -p 365:30,90:7,8:1 '"$HOME"'/sauvegardes/caldav.@d-@d-@d.sql.gz'


rm -Rf "$TMP/$$"

echo "Vous songerez à régler les mots de passe dans $dest/etc/caldavd-sudoers.plist et $dest/etc/caldavd-accounts.xml (repérer les ouille)" >&2
echo "L'invocation du serveur pourr se faire en:" >&2
echo "sudo $dest/bin/caldavd -f $dest/etc/caldavd.plist -X" >&2
echo "Pour Chandler, vous activerez l'authentification Basic dans $dest/etc/caldavd.plist" >&2
echo "Modifiez aussi le accounts.xml: ajouter des first-name et last-name à chaque compte." >&2
# N.B.: pour certain paquets, j'ai l'impression que le schéma est le suivant (genre pydir): s'il faut télécharger, je télécharge, décompresse et patche. Sinon je décompresse juste (et oublie de patcher). J'ai eu ce problème avec un pydirector non patché qui s'est installé (et du coup serveur non fonctionnel).
echo "Ne faudrait-il pas passer aussi http://trac.calendarserver.org/ticket/468 pour les clients très légers type jqCaldav?" >&2
echo "Pour les anciennes données (2 -> 3): les réimporter en tant que fichiers ICS, CalServ, à son premier lancement, créera la base PostGreSQL à partir de ces fichiers." >&2
echo "En version 4: ajouter <string>0.0.0.0</string> dans les BindAddresses de caldavd.plist: en effet, sans paramètre, il essaie de parcourir la liste de toutes les interfaces, trouve '' et '::' (IPv6), mais bind les deux comme des adresses IPv4, donc plantage pour la seconde." >&2
echo "En version 4.2: ajouter un <key>FreeBusyIndexLowerLimitDays</key><integer>0</integer> dans caldavd.plist à la racine de la conf (avant la section FreeBusyURL, par exemple). Ils ont semble-t-il branché cette limitation sur la requête qui permet à agendav de consulter le passé." >&2
echo "Surtout ne pas effacer le contenu du répertoire /tmp: cette saleté a besoin de ça dans son PYTHONPATH (voir le bin/caldavd). Normalement tout est recopié dans $dest, mais un PYTHONPATH épuré donne une application non fonctionnelle. Donc pour le moment on repose sur ce contenu de /tmp." >&2
echo "Pour comprendre les pb de perfs: mkdir /tmp/pp, le lancer comme dans /usr/local/etc/rc.d/calserv en ajoutant un -p /tmp/pp, lancer des requêtes, le tuer, python -c 'import pstats;p=pstats.Stats(\"/tmp/pp/caldav-0.pstats\");p.sort_stats(\"tot\");p.print_stats()" >&2
